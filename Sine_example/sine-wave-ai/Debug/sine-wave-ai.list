
sine-wave-ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08003f60  08003f60  00004f60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  00006698  2**0
                  CONTENTS
  4 .ARM          00000000  08004234  08004234  00006698  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004234  08004234  00006698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004234  08004234  00005234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004238  08004238  00005238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000698  20000000  0800423c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006698  2**0
                  CONTENTS
 10 .bss          00000140  20000698  20000698  00006698  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  200007d8  200007d8  00006698  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006698  2**0
                  CONTENTS, READONLY
 13 .debug_info   000058e2  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012e8  00000000  00000000  0000bfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  0000d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002f3  00000000  00000000  0000d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ede6  00000000  00000000  0000d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000640f  00000000  00000000  0002c7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0afe  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  000f36b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e84  00000000  00000000  000f373c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000f45c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000698 	.word	0x20000698
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f40 	.word	0x08003f40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000069c 	.word	0x2000069c
 80001c4:	08003f40 	.word	0x08003f40

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b0aa      	sub	sp, #168	@ 0xa8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 f99b 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8c1 	bl	8000358 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  ai_handle network = AI_HANDLE_NULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  	ai_error err;
  	ai_network_report report;


	/** @brief Initialize network */
	const ai_handle acts[] = { activations };
 80001dc:	4b56      	ldr	r3, [pc, #344]	@ (8000338 <main+0x170>)
 80001de:	607b      	str	r3, [r7, #4]
	err = ai_sin_wave_create_and_init(&network, acts, NULL);
 80001e0:	1d39      	adds	r1, r7, #4
 80001e2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80001e6:	2200      	movs	r2, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fe85 	bl	8001ef8 <ai_sin_wave_create_and_init>
 80001ee:	4603      	mov	r3, r0
 80001f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (err.type != AI_ERROR_NONE)
 80001f4:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <main+0x3a>
	{
		//StrLen = sprintf(TX_Buffer, "ai init_and_create error\r\n");
		//HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);
		return -1;
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000200:	e096      	b.n	8000330 <main+0x168>
	}

	/** @brief {optional} for debug/log purpose */
	if (ai_sin_wave_get_report(network, &report) != true)
 8000202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000206:	f107 0208 	add.w	r2, r7, #8
 800020a:	4611      	mov	r1, r2
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fde5 	bl	8001ddc <ai_sin_wave_get_report>
 8000212:	4603      	mov	r3, r0
 8000214:	f083 0301 	eor.w	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d002      	beq.n	8000224 <main+0x5c>
	{
		//StrLen = sprintf(TX_Buffer, "ai get report error\r\n");
		//HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);
		return -1;
 800021e:	f04f 33ff 	mov.w	r3, #4294967295
 8000222:	e085      	b.n	8000330 <main+0x168>
	//StrLen = sprintf(TX_Buffer, "Model name      : %s\r\n", report.model_name);
	//HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);
	//StrLen = sprintf(TX_Buffer, "Model signature : %s\r\n", report.model_signature);
	//HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);

	ai_input = &report.inputs[0];
 8000224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000226:	4a45      	ldr	r2, [pc, #276]	@ (800033c <main+0x174>)
 8000228:	6013      	str	r3, [r2, #0]
	ai_output = &report.outputs[0];
 800022a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800022c:	4a44      	ldr	r2, [pc, #272]	@ (8000340 <main+0x178>)
 800022e:	6013      	str	r3, [r2, #0]
//			(int) AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_WIDTH),
	//		(int) AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_CHANNEL));
//	HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);

	/** @brief Fill input buffer with random values */
	for (uint32_t i = 0; i < AI_SIN_WAVE_IN_1_SIZE; i++)
 8000230:	2300      	movs	r3, #0
 8000232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000236:	e00c      	b.n	8000252 <main+0x8a>
	{
		((ai_float*) in_data)[i] = (ai_float) x_val;
 8000238:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4a41      	ldr	r2, [pc, #260]	@ (8000344 <main+0x17c>)
 8000240:	4413      	add	r3, r2
 8000242:	4a41      	ldr	r2, [pc, #260]	@ (8000348 <main+0x180>)
 8000244:	6812      	ldr	r2, [r2, #0]
 8000246:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_SIN_WAVE_IN_1_SIZE; i++)
 8000248:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800024c:	3301      	adds	r3, #1
 800024e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0ee      	beq.n	8000238 <main+0x70>
	/** @brief Create the AI buffer IO handlers
	 *  @note  ai_inuput/ai_output are already initilaized after the
	 *         ai_network_get_report() call. This is just here to illustrate
	 *         the case where get_report() is not called.
	 */
	ai_input = ai_sin_wave_inputs_get(network, NULL);
 800025a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fec7 	bl	8001ff4 <ai_sin_wave_inputs_get>
 8000266:	4603      	mov	r3, r0
 8000268:	4a34      	ldr	r2, [pc, #208]	@ (800033c <main+0x174>)
 800026a:	6013      	str	r3, [r2, #0]
	ai_output = ai_sin_wave_outputs_get(network, NULL);
 800026c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fed8 	bl	8002028 <ai_sin_wave_outputs_get>
 8000278:	4603      	mov	r3, r0
 800027a:	4a31      	ldr	r2, [pc, #196]	@ (8000340 <main+0x178>)
 800027c:	6013      	str	r3, [r2, #0]

	/** @brief Set input/output buffer addresses */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800027e:	4b2f      	ldr	r3, [pc, #188]	@ (800033c <main+0x174>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a30      	ldr	r2, [pc, #192]	@ (8000344 <main+0x17c>)
 8000284:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000286:	4b2e      	ldr	r3, [pc, #184]	@ (8000340 <main+0x178>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a30      	ldr	r2, [pc, #192]	@ (800034c <main+0x184>)
 800028c:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (uint32_t i = 0; i < AI_SIN_WAVE_IN_1_SIZE; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000294:	e00c      	b.n	80002b0 <main+0xe8>
	  		{
	  			((ai_float*) in_data)[i] = (ai_float) x_val;
 8000296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4a29      	ldr	r2, [pc, #164]	@ (8000344 <main+0x17c>)
 800029e:	4413      	add	r3, r2
 80002a0:	4a29      	ldr	r2, [pc, #164]	@ (8000348 <main+0x180>)
 80002a2:	6812      	ldr	r2, [r2, #0]
 80002a4:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_SIN_WAVE_IN_1_SIZE; i++)
 80002a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80002aa:	3301      	adds	r3, #1
 80002ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80002b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0ee      	beq.n	8000296 <main+0xce>
	  		}

	  		/** @brief Perform the inference */
	  		n_batch = ai_sin_wave_run(network, &ai_input[0], &ai_output[0]);
 80002b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80002bc:	4a1f      	ldr	r2, [pc, #124]	@ (800033c <main+0x174>)
 80002be:	6811      	ldr	r1, [r2, #0]
 80002c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000340 <main+0x178>)
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 ff05 	bl	80020d4 <ai_sin_wave_run>
 80002ca:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	  		if (n_batch != 1)
 80002ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d00a      	beq.n	80002ec <main+0x124>
	  		{
	  			err = ai_sin_wave_get_error(network);
 80002d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fdea 	bl	8001eb4 <ai_sin_wave_get_error>
 80002e0:	4603      	mov	r3, r0
 80002e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	  		//	StrLen = sprintf(TX_Buffer, "ai run error %d, %d\r\n", err.type, err.code);
	  		//	HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);
	  			return -1;
 80002e6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ea:	e021      	b.n	8000330 <main+0x168>
	  		}

	  		/** @brief Post-process the output results/predictions */
	  		y_val = ((float*) out_data)[0];
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <main+0x184>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a17      	ldr	r2, [pc, #92]	@ (8000350 <main+0x188>)
 80002f2:	6013      	str	r3, [r2, #0]
	  		//StrLen = sprintf(TX_Buffer, "Input Data : %.5f", x_val);
	  		//HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);
	  		//StrLen = sprintf(TX_Buffer, "|   Output Data : %.5f\r\n", y_val);
	  		//HAL_UART_Transmit(&huart1, TX_Buffer, StrLen, 1000);

	  		if (x_val > 6.0f)
 80002f4:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <main+0x180>)
 80002f6:	edd3 7a00 	vldr	s15, [r3]
 80002fa:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80002fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000306:	dd04      	ble.n	8000312 <main+0x14a>
	  		{
	  			x_val = 0.0f;
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <main+0x180>)
 800030a:	f04f 0200 	mov.w	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	e009      	b.n	8000326 <main+0x15e>
	  		}
	  		else
	  		{
	  			x_val = x_val + 0.1f;
 8000312:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <main+0x180>)
 8000314:	edd3 7a00 	vldr	s15, [r3]
 8000318:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000354 <main+0x18c>
 800031c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <main+0x180>)
 8000322:	edc3 7a00 	vstr	s15, [r3]
	  		}

	  		HAL_Delay(500);
 8000326:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800032a:	f000 f953 	bl	80005d4 <HAL_Delay>
	  for (uint32_t i = 0; i < AI_SIN_WAVE_IN_1_SIZE; i++)
 800032e:	e7ae      	b.n	800028e <main+0xc6>

  }
  /* USER CODE END 3 */
}
 8000330:	4618      	mov	r0, r3
 8000332:	37a8      	adds	r7, #168	@ 0xa8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200006b4 	.word	0x200006b4
 800033c:	2000073c 	.word	0x2000073c
 8000340:	20000740 	.word	0x20000740
 8000344:	20000734 	.word	0x20000734
 8000348:	20000000 	.word	0x20000000
 800034c:	20000738 	.word	0x20000738
 8000350:	20000744 	.word	0x20000744
 8000354:	3dcccccd 	.word	0x3dcccccd

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b090      	sub	sp, #64	@ 0x40
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	2228      	movs	r2, #40	@ 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fdb0 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037a:	2302      	movs	r3, #2
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	2301      	movs	r3, #1
 8000380:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	2310      	movs	r3, #16
 8000384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038a:	2300      	movs	r3, #0
 800038c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800038e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fa25 	bl	80007e8 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003a4:	f000 f819 	bl	80003da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fa4e 	bl	8001864 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ce:	f000 f804 	bl	80003da <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	@ 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
}
 80003e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e2:	bf00      	nop
 80003e4:	e7fd      	b.n	80003e2 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <HAL_MspInit+0x44>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a08      	ldr	r2, [pc, #32]	@ (800042c <HAL_MspInit+0x44>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <NMI_Handler+0x4>

08000438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <MemManage_Handler+0x4>

08000448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <BusFault_Handler+0x4>

08000450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <UsageFault_Handler+0x4>

08000458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000486:	f000 f885 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <SystemInit+0x20>)
 8000496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800049a:	4a05      	ldr	r2, [pc, #20]	@ (80004b0 <SystemInit+0x20>)
 800049c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004b8:	f7ff ffea 	bl	8000490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	@ (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	@ (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	@ (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e2:	f003 fcfb 	bl	8003edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004e6:	f7ff fe6f 	bl	80001c8 <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004ec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 80004f8:	0800423c 	.word	0x0800423c
  ldr r2, =_sbss
 80004fc:	20000698 	.word	0x20000698
  ldr r4, =_ebss
 8000500:	200007d8 	.word	0x200007d8

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_Init+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <HAL_Init+0x28>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f931 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	200f      	movs	r0, #15
 8000520:	f000 f808 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f7ff ff60 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f93b 	bl	80007ce <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f911 	bl	8000796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000004 	.word	0x20000004
 800058c:	2000000c 	.word	0x2000000c
 8000590:	20000008 	.word	0x20000008

08000594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000000c 	.word	0x2000000c
 80005b8:	20000748 	.word	0x20000748

080005bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;  
 80005c0:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <HAL_GetTick+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000748 	.word	0x20000748

080005d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff ffee 	bl	80005bc <HAL_GetTick>
 80005e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ec:	d005      	beq.n	80005fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_Delay+0x44>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005fa:	bf00      	nop
 80005fc:	f7ff ffde 	bl	80005bc <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d8f7      	bhi.n	80005fc <HAL_Delay+0x28>
  {
  }
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000000c 	.word	0x2000000c

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	@ (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	@ (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	@ (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	@ 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	@ 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f7ff ff8e 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff47 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff5c 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ff8e 	bl	80006d4 <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5d 	bl	8000680 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffb0 	bl	800073c <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80007f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80007f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80007fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	f001 b823 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800080e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 817d 	beq.w	8000b1e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000824:	4bbc      	ldr	r3, [pc, #752]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f003 030c 	and.w	r3, r3, #12
 800082c:	2b04      	cmp	r3, #4
 800082e:	d00c      	beq.n	800084a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000830:	4bb9      	ldr	r3, [pc, #740]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 030c 	and.w	r3, r3, #12
 8000838:	2b08      	cmp	r3, #8
 800083a:	d15c      	bne.n	80008f6 <HAL_RCC_OscConfig+0x10e>
 800083c:	4bb6      	ldr	r3, [pc, #728]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000848:	d155      	bne.n	80008f6 <HAL_RCC_OscConfig+0x10e>
 800084a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800084e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000852:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000856:	fa93 f3a3 	rbit	r3, r3
 800085a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800085e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000862:	fab3 f383 	clz	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	095b      	lsrs	r3, r3, #5
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b01      	cmp	r3, #1
 8000874:	d102      	bne.n	800087c <HAL_RCC_OscConfig+0x94>
 8000876:	4ba8      	ldr	r3, [pc, #672]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	e015      	b.n	80008a8 <HAL_RCC_OscConfig+0xc0>
 800087c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000880:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000884:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000888:	fa93 f3a3 	rbit	r3, r3
 800088c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000890:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000894:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000898:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800089c:	fa93 f3a3 	rbit	r3, r3
 80008a0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80008a4:	4b9c      	ldr	r3, [pc, #624]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 80008a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008ac:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80008b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80008b4:	fa92 f2a2 	rbit	r2, r2
 80008b8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80008bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	f042 0220 	orr.w	r2, r2, #32
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	f002 021f 	and.w	r2, r2, #31
 80008d0:	2101      	movs	r1, #1
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	4013      	ands	r3, r2
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 811f 	beq.w	8000b1c <HAL_RCC_OscConfig+0x334>
 80008de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80008e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 8116 	bne.w	8000b1c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f000 bfaf 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80008fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000906:	d106      	bne.n	8000916 <HAL_RCC_OscConfig+0x12e>
 8000908:	4b83      	ldr	r3, [pc, #524]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a82      	ldr	r2, [pc, #520]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800090e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	e036      	b.n	8000984 <HAL_RCC_OscConfig+0x19c>
 8000916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800091a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0x158>
 8000926:	4b7c      	ldr	r3, [pc, #496]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a7b      	ldr	r2, [pc, #492]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800092c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4b79      	ldr	r3, [pc, #484]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a78      	ldr	r2, [pc, #480]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000938:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e021      	b.n	8000984 <HAL_RCC_OscConfig+0x19c>
 8000940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000944:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000950:	d10c      	bne.n	800096c <HAL_RCC_OscConfig+0x184>
 8000952:	4b71      	ldr	r3, [pc, #452]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a70      	ldr	r2, [pc, #448]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	4b6e      	ldr	r3, [pc, #440]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a6d      	ldr	r2, [pc, #436]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	e00b      	b.n	8000984 <HAL_RCC_OscConfig+0x19c>
 800096c:	4b6a      	ldr	r3, [pc, #424]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a69      	ldr	r2, [pc, #420]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b67      	ldr	r3, [pc, #412]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a66      	ldr	r2, [pc, #408]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800097e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000982:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000984:	4b64      	ldr	r3, [pc, #400]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000988:	f023 020f 	bic.w	r2, r3, #15
 800098c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000990:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	495f      	ldr	r1, [pc, #380]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 800099a:	4313      	orrs	r3, r2
 800099c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800099e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d059      	beq.n	8000a62 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ae:	f7ff fe05 	bl	80005bc <HAL_GetTick>
 80009b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b6:	e00a      	b.n	80009ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b8:	f7ff fe00 	bl	80005bc <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	2b64      	cmp	r3, #100	@ 0x64
 80009c6:	d902      	bls.n	80009ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80009c8:	2303      	movs	r3, #3
 80009ca:	f000 bf43 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
 80009ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009d2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009da:	fa93 f3a3 	rbit	r3, r3
 80009de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80009e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e6:	fab3 f383 	clz	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <HAL_RCC_OscConfig+0x218>
 80009fa:	4b47      	ldr	r3, [pc, #284]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	e015      	b.n	8000a2c <HAL_RCC_OscConfig+0x244>
 8000a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a04:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000a0c:	fa93 f3a3 	rbit	r3, r3
 8000a10:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a18:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000a1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000a20:	fa93 f3a3 	rbit	r3, r3
 8000a24:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000a28:	4b3b      	ldr	r3, [pc, #236]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a30:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000a34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000a38:	fa92 f2a2 	rbit	r2, r2
 8000a3c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000a40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000a44:	fab2 f282 	clz	r2, r2
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	f042 0220 	orr.w	r2, r2, #32
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	f002 021f 	and.w	r2, r2, #31
 8000a54:	2101      	movs	r1, #1
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0ab      	beq.n	80009b8 <HAL_RCC_OscConfig+0x1d0>
 8000a60:	e05d      	b.n	8000b1e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a62:	f7ff fdab 	bl	80005bc <HAL_GetTick>
 8000a66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a6a:	e00a      	b.n	8000a82 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a6c:	f7ff fda6 	bl	80005bc <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b64      	cmp	r3, #100	@ 0x64
 8000a7a:	d902      	bls.n	8000a82 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	f000 bee9 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
 8000a82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a86:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000a8e:	fa93 f3a3 	rbit	r3, r3
 8000a92:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000a96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	095b      	lsrs	r3, r3, #5
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d102      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x2cc>
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	e015      	b.n	8000ae0 <HAL_RCC_OscConfig+0x2f8>
 8000ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ab8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ac0:	fa93 f3a3 	rbit	r3, r3
 8000ac4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ac8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000acc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000ad0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000ad4:	fa93 f3a3 	rbit	r3, r3
 8000ad8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <HAL_RCC_OscConfig+0x330>)
 8000ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ae4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000ae8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000aec:	fa92 f2a2 	rbit	r2, r2
 8000af0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000af4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	f042 0220 	orr.w	r2, r2, #32
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	f002 021f 	and.w	r2, r2, #31
 8000b08:	2101      	movs	r1, #1
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	4013      	ands	r3, r2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1ab      	bne.n	8000a6c <HAL_RCC_OscConfig+0x284>
 8000b14:	e003      	b.n	8000b1e <HAL_RCC_OscConfig+0x336>
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 817d 	beq.w	8000e2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b34:	4ba6      	ldr	r3, [pc, #664]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00b      	beq.n	8000b58 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b40:	4ba3      	ldr	r3, [pc, #652]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 030c 	and.w	r3, r3, #12
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d172      	bne.n	8000c32 <HAL_RCC_OscConfig+0x44a>
 8000b4c:	4ba0      	ldr	r3, [pc, #640]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d16c      	bne.n	8000c32 <HAL_RCC_OscConfig+0x44a>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000b62:	fa93 f3a3 	rbit	r3, r3
 8000b66:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000b6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6e:	fab3 f383 	clz	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	095b      	lsrs	r3, r3, #5
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <HAL_RCC_OscConfig+0x3a0>
 8000b82:	4b93      	ldr	r3, [pc, #588]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	e013      	b.n	8000bb0 <HAL_RCC_OscConfig+0x3c8>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000b92:	fa93 f3a3 	rbit	r3, r3
 8000b96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ba0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000ba4:	fa93 f3a3 	rbit	r3, r3
 8000ba8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000bac:	4b88      	ldr	r3, [pc, #544]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000bb6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000bba:	fa92 f2a2 	rbit	r2, r2
 8000bbe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000bc2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	f042 0220 	orr.w	r2, r2, #32
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	f002 021f 	and.w	r2, r2, #31
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x410>
 8000be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d002      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f000 be2e 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf8:	4b75      	ldr	r3, [pc, #468]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	21f8      	movs	r1, #248	@ 0xf8
 8000c0e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c12:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000c16:	fa91 f1a1 	rbit	r1, r1
 8000c1a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000c1e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000c22:	fab1 f181 	clz	r1, r1
 8000c26:	b2c9      	uxtb	r1, r1
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	4969      	ldr	r1, [pc, #420]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c30:	e0fd      	b.n	8000e2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8088 	beq.w	8000d54 <HAL_RCC_OscConfig+0x56c>
 8000c44:	2301      	movs	r3, #1
 8000c46:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000c4e:	fa93 f3a3 	rbit	r3, r3
 8000c52:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000c56:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c5a:	fab3 f383 	clz	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000c64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fca4 	bl	80005bc <HAL_GetTick>
 8000c74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c78:	e00a      	b.n	8000c90 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fc9f 	bl	80005bc <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d902      	bls.n	8000c90 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	f000 bde2 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c96:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8000ca2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca6:	fab3 f383 	clz	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	095b      	lsrs	r3, r3, #5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d102      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x4d8>
 8000cba:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	e013      	b.n	8000ce8 <HAL_RCC_OscConfig+0x500>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000cd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000cdc:	fa93 f3a3 	rbit	r3, r3
 8000ce0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce8:	2202      	movs	r2, #2
 8000cea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8000cee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000cf2:	fa92 f2a2 	rbit	r2, r2
 8000cf6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8000cfa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	f042 0220 	orr.w	r2, r2, #32
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	f002 021f 	and.w	r2, r2, #31
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fa01 f202 	lsl.w	r2, r1, r2
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0af      	beq.n	8000c7a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	21f8      	movs	r1, #248	@ 0xf8
 8000d30:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000d38:	fa91 f1a1 	rbit	r1, r1
 8000d3c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8000d40:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8000d44:	fab1 f181 	clz	r1, r1
 8000d48:	b2c9      	uxtb	r1, r1
 8000d4a:	408b      	lsls	r3, r1
 8000d4c:	4920      	ldr	r1, [pc, #128]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
 8000d52:	e06c      	b.n	8000e2e <HAL_RCC_OscConfig+0x646>
 8000d54:	2301      	movs	r3, #1
 8000d56:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8000d66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000d74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fc1c 	bl	80005bc <HAL_GetTick>
 8000d84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d88:	e00a      	b.n	8000da0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc17 	bl	80005bc <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d902      	bls.n	8000da0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f000 bd5a 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8000db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	fab3 f383 	clz	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	095b      	lsrs	r3, r3, #5
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d104      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x5ec>
 8000dca:	4b01      	ldr	r3, [pc, #4]	@ (8000dd0 <HAL_RCC_OscConfig+0x5e8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	e015      	b.n	8000dfc <HAL_RCC_OscConfig+0x614>
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000dec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000df8:	4bc8      	ldr	r3, [pc, #800]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000e02:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000e06:	fa92 f2a2 	rbit	r2, r2
 8000e0a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8000e0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e12:	fab2 f282 	clz	r2, r2
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	f002 021f 	and.w	r2, r2, #31
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1ad      	bne.n	8000d8a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8110 	beq.w	8001064 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d079      	beq.n	8000f48 <HAL_RCC_OscConfig+0x760>
 8000e54:	2301      	movs	r3, #1
 8000e56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8000e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4bab      	ldr	r3, [pc, #684]	@ (8001120 <HAL_RCC_OscConfig+0x938>)
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fb9d 	bl	80005bc <HAL_GetTick>
 8000e82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	e00a      	b.n	8000e9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fb98 	bl	80005bc <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d902      	bls.n	8000e9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f000 bcdb 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000eb8:	2202      	movs	r2, #2
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ec0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	fa93 f2a3 	rbit	r2, r3
 8000eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000edc:	2202      	movs	r2, #2
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	fa93 f2a3 	rbit	r2, r3
 8000eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ef6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef8:	4b88      	ldr	r3, [pc, #544]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 8000efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f04:	2102      	movs	r1, #2
 8000f06:	6019      	str	r1, [r3, #0]
 8000f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	fa93 f1a3 	rbit	r1, r3
 8000f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f1e:	6019      	str	r1, [r3, #0]
  return result;
 8000f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	fab3 f383 	clz	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0a0      	beq.n	8000e88 <HAL_RCC_OscConfig+0x6a0>
 8000f46:	e08d      	b.n	8001064 <HAL_RCC_OscConfig+0x87c>
 8000f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	fa93 f2a3 	rbit	r2, r3
 8000f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000f6a:	601a      	str	r2, [r3, #0]
  return result;
 8000f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000f74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b68      	ldr	r3, [pc, #416]	@ (8001120 <HAL_RCC_OscConfig+0x938>)
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	461a      	mov	r2, r3
 8000f86:	2300      	movs	r3, #0
 8000f88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb17 	bl	80005bc <HAL_GetTick>
 8000f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f94:	f7ff fb12 	bl	80005bc <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d902      	bls.n	8000faa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f000 bc55 	b.w	8001854 <HAL_RCC_OscConfig+0x106c>
 8000faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	fa93 f2a3 	rbit	r2, r3
 8000fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fa93 f2a3 	rbit	r2, r3
 8000fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ff6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001002:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	fa93 f2a3 	rbit	r2, r3
 800100c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001010:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001014:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001016:	4b41      	ldr	r3, [pc, #260]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 8001018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800101a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800101e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001022:	2102      	movs	r1, #2
 8001024:	6019      	str	r1, [r3, #0]
 8001026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800102a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	fa93 f1a3 	rbit	r1, r3
 8001034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001038:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800103c:	6019      	str	r1, [r3, #0]
  return result;
 800103e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001042:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d197      	bne.n	8000f94 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001068:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 81a1 	beq.w	80013bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d116      	bne.n	80010ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	61d3      	str	r3, [r2, #28]
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80010a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010a4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80010b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <HAL_RCC_OscConfig+0x93c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11a      	bne.n	80010fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_RCC_OscConfig+0x93c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <HAL_RCC_OscConfig+0x93c>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fa73 	bl	80005bc <HAL_GetTick>
 80010d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010da:	e009      	b.n	80010f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010dc:	f7ff fa6e 	bl	80005bc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	@ 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e3b1      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_RCC_OscConfig+0x93c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ef      	beq.n	80010dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001100:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10d      	bne.n	8001128 <HAL_RCC_OscConfig+0x940>
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a02      	ldr	r2, [pc, #8]	@ (800111c <HAL_RCC_OscConfig+0x934>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6213      	str	r3, [r2, #32]
 8001118:	e03c      	b.n	8001194 <HAL_RCC_OscConfig+0x9ac>
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	10908120 	.word	0x10908120
 8001124:	40007000 	.word	0x40007000
 8001128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <HAL_RCC_OscConfig+0x96a>
 8001138:	4bc1      	ldr	r3, [pc, #772]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4ac0      	ldr	r2, [pc, #768]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	4bbe      	ldr	r3, [pc, #760]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4abd      	ldr	r2, [pc, #756]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	6213      	str	r3, [r2, #32]
 8001150:	e020      	b.n	8001194 <HAL_RCC_OscConfig+0x9ac>
 8001152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001156:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b05      	cmp	r3, #5
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x994>
 8001162:	4bb7      	ldr	r3, [pc, #732]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4ab6      	ldr	r2, [pc, #728]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	4bb4      	ldr	r3, [pc, #720]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4ab3      	ldr	r2, [pc, #716]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0x9ac>
 800117c:	4bb0      	ldr	r3, [pc, #704]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4aaf      	ldr	r2, [pc, #700]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	4bad      	ldr	r3, [pc, #692]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4aac      	ldr	r2, [pc, #688]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800118e:	f023 0304 	bic.w	r3, r3, #4
 8001192:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8081 	beq.w	80012a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fa09 	bl	80005bc <HAL_GetTick>
 80011aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fa04 	bl	80005bc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e345      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
 80011c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011d0:	2202      	movs	r2, #2
 80011d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fa93 f2a3 	rbit	r2, r3
 80011e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	fa93 f2a3 	rbit	r2, r3
 8001206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800120a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800120e:	601a      	str	r2, [r3, #0]
  return result;
 8001210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001214:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001218:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0xa4c>
 800122e:	4b84      	ldr	r3, [pc, #528]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	e013      	b.n	800125c <HAL_RCC_OscConfig+0xa74>
 8001234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001238:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800123c:	2202      	movs	r2, #2
 800123e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001244:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	fa93 f2a3 	rbit	r2, r3
 800124e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001252:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	4b79      	ldr	r3, [pc, #484]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001260:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001264:	2102      	movs	r1, #2
 8001266:	6011      	str	r1, [r2, #0]
 8001268:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800126c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	fa92 f1a2 	rbit	r1, r2
 8001276:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800127a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800127e:	6011      	str	r1, [r2, #0]
  return result;
 8001280:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001284:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	fab2 f282 	clz	r2, r2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f002 021f 	and.w	r2, r2, #31
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d084      	beq.n	80011b0 <HAL_RCC_OscConfig+0x9c8>
 80012a6:	e07f      	b.n	80013a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff f988 	bl	80005bc <HAL_GetTick>
 80012ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff f983 	bl	80005bc <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e2c4      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
 80012ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80012d2:	2202      	movs	r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	fa93 f2a3 	rbit	r2, r3
 80012e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80012f6:	2202      	movs	r2, #2
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fa93 f2a3 	rbit	r2, r3
 8001308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800130c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001310:	601a      	str	r2, [r3, #0]
  return result;
 8001312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001316:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800131a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0xb4e>
 8001330:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	e013      	b.n	800135e <HAL_RCC_OscConfig+0xb76>
 8001336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800133a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800133e:	2202      	movs	r2, #2
 8001340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001346:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	fa93 f2a3 	rbit	r2, r3
 8001350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001354:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001362:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001366:	2102      	movs	r1, #2
 8001368:	6011      	str	r1, [r2, #0]
 800136a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800136e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	fa92 f1a2 	rbit	r1, r2
 8001378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800137c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001380:	6011      	str	r1, [r2, #0]
  return result;
 8001382:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001386:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	fab2 f282 	clz	r2, r2
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f002 021f 	and.w	r2, r2, #31
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d184      	bne.n	80012b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b0:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 80013b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8242 	beq.w	8001852 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <HAL_RCC_OscConfig+0xc58>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	f000 8213 	beq.w	8001802 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	f040 8162 	bne.w	80016b2 <HAL_RCC_OscConfig+0xeca>
 80013ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80013f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001400:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001412:	601a      	str	r2, [r3, #0]
  return result;
 8001414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001418:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800141c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001428:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	461a      	mov	r2, r3
 8001430:	2300      	movs	r3, #0
 8001432:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff f8c2 	bl	80005bc <HAL_GetTick>
 8001438:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143c:	e00c      	b.n	8001458 <HAL_RCC_OscConfig+0xc70>
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f8ba 	bl	80005bc <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1fd      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
 8001458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800145c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001460:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fa93 f2a3 	rbit	r2, r3
 8001474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001478:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800147c:	601a      	str	r2, [r3, #0]
  return result;
 800147e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001482:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001486:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0xcba>
 800149c:	4bb0      	ldr	r3, [pc, #704]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	e027      	b.n	80014f2 <HAL_RCC_OscConfig+0xd0a>
 80014a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80014aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014cc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80014d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014da:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa93 f2a3 	rbit	r2, r3
 80014e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80014f6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80014fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80014fe:	6011      	str	r1, [r2, #0]
 8001500:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001504:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	fa92 f1a2 	rbit	r1, r2
 800150e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001512:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001516:	6011      	str	r1, [r2, #0]
  return result;
 8001518:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800151c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	fab2 f282 	clz	r2, r2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f002 021f 	and.w	r2, r2, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d182      	bne.n	8001444 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153e:	4b88      	ldr	r3, [pc, #544]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001556:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	430b      	orrs	r3, r1
 8001560:	497f      	ldr	r1, [pc, #508]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800156e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001578:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800158a:	601a      	str	r2, [r3, #0]
  return result;
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001594:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	461a      	mov	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff f806 	bl	80005bc <HAL_GetTick>
 80015b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	e009      	b.n	80015ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff f801 	bl	80005bc <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e144      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80015d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f2a3 	rbit	r2, r3
 80015e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80015ee:	601a      	str	r2, [r3, #0]
  return result;
 80015f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80015f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d102      	bne.n	8001614 <HAL_RCC_OscConfig+0xe2c>
 800160e:	4b54      	ldr	r3, [pc, #336]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	e027      	b.n	8001664 <HAL_RCC_OscConfig+0xe7c>
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800161c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001626:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001642:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001668:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800166c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001670:	6011      	str	r1, [r2, #0]
 8001672:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001676:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	fa92 f1a2 	rbit	r1, r2
 8001680:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001684:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001688:	6011      	str	r1, [r2, #0]
  return result;
 800168a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800168e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	fab2 f282 	clz	r2, r2
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f042 0220 	orr.w	r2, r2, #32
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f002 021f 	and.w	r2, r2, #31
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d082      	beq.n	80015b6 <HAL_RCC_OscConfig+0xdce>
 80016b0:	e0cf      	b.n	8001852 <HAL_RCC_OscConfig+0x106a>
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80016ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80016d6:	601a      	str	r2, [r3, #0]
  return result;
 80016d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80016e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	461a      	mov	r2, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7fe ff60 	bl	80005bc <HAL_GetTick>
 80016fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	e009      	b.n	8001716 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7fe ff5b 	bl	80005bc <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e09e      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
 8001716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800171e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800173a:	601a      	str	r2, [r3, #0]
  return result;
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001744:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d104      	bne.n	8001764 <HAL_RCC_OscConfig+0xf7c>
 800175a:	4b01      	ldr	r3, [pc, #4]	@ (8001760 <HAL_RCC_OscConfig+0xf78>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	e029      	b.n	80017b4 <HAL_RCC_OscConfig+0xfcc>
 8001760:	40021000 	.word	0x40021000
 8001764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001768:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800176c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001776:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001784:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001792:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017aa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <HAL_RCC_OscConfig+0x1078>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017b8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80017bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80017c0:	6011      	str	r1, [r2, #0]
 80017c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017c6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	fa92 f1a2 	rbit	r1, r2
 80017d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017d4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80017d8:	6011      	str	r1, [r2, #0]
  return result;
 80017da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0220 	orr.w	r2, r2, #32
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d180      	bne.n	8001702 <HAL_RCC_OscConfig+0xf1a>
 8001800:	e027      	b.n	8001852 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e01e      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_RCC_OscConfig+0x1078>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800181e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001822:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	429a      	cmp	r2, r3
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001836:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800183a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800183e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001842:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09e      	sub	sp, #120	@ 0x78
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e162      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b90      	ldr	r3, [pc, #576]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d910      	bls.n	80018ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b8d      	ldr	r3, [pc, #564]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	498b      	ldr	r1, [pc, #556]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b89      	ldr	r3, [pc, #548]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e14a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b82      	ldr	r3, [pc, #520]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	497f      	ldr	r1, [pc, #508]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80dc 	beq.w	8001a90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d13c      	bne.n	800195a <HAL_RCC_ClockConfig+0xf6>
 80018e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80018ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d102      	bne.n	800190a <HAL_RCC_ClockConfig+0xa6>
 8001904:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e00f      	b.n	800192a <HAL_RCC_ClockConfig+0xc6>
 800190a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800190e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	667b      	str	r3, [r7, #100]	@ 0x64
 8001918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800191c:	663b      	str	r3, [r7, #96]	@ 0x60
 800191e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001926:	4b67      	ldr	r3, [pc, #412]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800192e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001930:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001932:	fa92 f2a2 	rbit	r2, r2
 8001936:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001938:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800193a:	fab2 f282 	clz	r2, r2
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f042 0220 	orr.w	r2, r2, #32
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f002 021f 	and.w	r2, r2, #31
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d17b      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0f3      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d13c      	bne.n	80019dc <HAL_RCC_ClockConfig+0x178>
 8001962:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001966:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	095b      	lsrs	r3, r3, #5
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d102      	bne.n	800198c <HAL_RCC_ClockConfig+0x128>
 8001986:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	e00f      	b.n	80019ac <HAL_RCC_ClockConfig+0x148>
 800198c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	647b      	str	r3, [r7, #68]	@ 0x44
 800199a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
 80019a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a8:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80019b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019b4:	fa92 f2a2 	rbit	r2, r2
 80019b8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80019ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d13a      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b2      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
 80019dc:	2302      	movs	r3, #2
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80019e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	095b      	lsrs	r3, r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1a0>
 80019fe:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	e00d      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1bc>
 8001a04:	2302      	movs	r3, #2
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	2202      	movs	r2, #2
 8001a22:	61ba      	str	r2, [r7, #24]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	617a      	str	r2, [r7, #20]
  return result;
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	fab2 f282 	clz	r2, r2
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f002 021f 	and.w	r2, r2, #31
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e079      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	491a      	ldr	r1, [pc, #104]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7fe fdac 	bl	80005bc <HAL_GetTick>
 8001a64:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7fe fda8 	bl	80005bc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e061      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_RCC_ClockConfig+0x260>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d214      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 0207 	bic.w	r2, r3, #7
 8001aa6:	4906      	ldr	r1, [pc, #24]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <HAL_RCC_ClockConfig+0x25c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e040      	b.n	8001b42 <HAL_RCC_ClockConfig+0x2de>
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_RCC_ClockConfig+0x2e8>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	491a      	ldr	r1, [pc, #104]	@ (8001b4c <HAL_RCC_ClockConfig+0x2e8>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_RCC_ClockConfig+0x2e8>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4912      	ldr	r1, [pc, #72]	@ (8001b4c <HAL_RCC_ClockConfig+0x2e8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b06:	f000 f829 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_RCC_ClockConfig+0x2e8>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b14:	22f0      	movs	r2, #240	@ 0xf0
 8001b16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	fa92 f2a2 	rbit	r2, r2
 8001b1e:	60fa      	str	r2, [r7, #12]
  return result;
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	fab2 f282 	clz	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	40d3      	lsrs	r3, r2
 8001b2a:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <HAL_RCC_ClockConfig+0x2ec>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <HAL_RCC_ClockConfig+0x2f0>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001b36:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_RCC_ClockConfig+0x2f4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fcfa 	bl	8000534 <HAL_InitTick>
  
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3778      	adds	r7, #120	@ 0x78
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08004008 	.word	0x08004008
 8001b54:	20000004 	.word	0x20000004
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x30>
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x36>
 8001b8a:	e026      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b8e:	613b      	str	r3, [r7, #16]
      break;
 8001b90:	e026      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e004      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
      break;
 8001bd8:	e002      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bdc:	613b      	str	r3, [r7, #16]
      break;
 8001bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be0:	693b      	ldr	r3, [r7, #16]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	007a1200 	.word	0x007a1200
 8001bf8:	08004018 	.word	0x08004018
 8001bfc:	08004028 	.word	0x08004028
 8001c00:	003d0900 	.word	0x003d0900

08001c04 <sin_wave_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sin_wave_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sin_wave_activations_map, 1, params)) {
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4825      	ldr	r0, [pc, #148]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c14:	f000 fb38 	bl	8002288 <ai_platform_get_activations_map>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d039      	beq.n	8001c92 <sin_wave_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_sin_wave_activations_map[0] + 60);
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	333c      	adds	r3, #60	@ 0x3c
 8001c24:	4a21      	ldr	r2, [pc, #132]	@ (8001cac <sin_wave_configure_activations+0xa8>)
 8001c26:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_sin_wave_activations_map[0] + 60);
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	333c      	adds	r3, #60	@ 0x3c
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <sin_wave_configure_activations+0xa8>)
 8001c30:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_sin_wave_activations_map[0] + 64);
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3340      	adds	r3, #64	@ 0x40
 8001c38:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb0 <sin_wave_configure_activations+0xac>)
 8001c3a:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sin_wave_activations_map[0] + 64);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3340      	adds	r3, #64	@ 0x40
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <sin_wave_configure_activations+0xac>)
 8001c44:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_sin_wave_activations_map[0] + 64);
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3340      	adds	r3, #64	@ 0x40
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <sin_wave_configure_activations+0xb0>)
 8001c4e:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sin_wave_activations_map[0] + 64);
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3340      	adds	r3, #64	@ 0x40
 8001c56:	4a17      	ldr	r2, [pc, #92]	@ (8001cb4 <sin_wave_configure_activations+0xb0>)
 8001c58:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_sin_wave_activations_map[0] + 0);
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <sin_wave_configure_activations+0xb4>)
 8001c60:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sin_wave_activations_map[0] + 0);
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <sin_wave_configure_activations+0xb4>)
 8001c68:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_sin_wave_activations_map[0] + 64);
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3340      	adds	r3, #64	@ 0x40
 8001c70:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <sin_wave_configure_activations+0xb8>)
 8001c72:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sin_wave_activations_map[0] + 64);
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3340      	adds	r3, #64	@ 0x40
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <sin_wave_configure_activations+0xb8>)
 8001c7c:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_sin_wave_activations_map[0] + 0);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <sin_wave_configure_activations+0xbc>)
 8001c84:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sin_wave_activations_map[0] + 0);
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <sin_wave_configure_activations+0xa4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <sin_wave_configure_activations+0xbc>)
 8001c8c:	60d3      	str	r3, [r2, #12]
    return true;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e005      	b.n	8001c9e <sin_wave_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8001c92:	2213      	movs	r2, #19
 8001c94:	2130      	movs	r1, #48	@ 0x30
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fbb4 	bl	8002404 <ai_platform_network_set_error>
  return false;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000074c 	.word	0x2000074c
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	20000020 	.word	0x20000020
 8001cb4:	20000030 	.word	0x20000030
 8001cb8:	20000040 	.word	0x20000040
 8001cbc:	20000050 	.word	0x20000050
 8001cc0:	20000060 	.word	0x20000060

08001cc4 <sin_wave_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sin_wave_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sin_wave_weights_map, 1, params)) {
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	483b      	ldr	r0, [pc, #236]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001cd4:	f000 fa84 	bl	80021e0 <ai_platform_get_weights_map>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d065      	beq.n	8001daa <sin_wave_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001cde:	4b39      	ldr	r3, [pc, #228]	@ (8001dc4 <sin_wave_configure_weights+0x100>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ce6:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <sin_wave_configure_weights+0x100>)
 8001ce8:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sin_wave_weights_map[0] + 0);
 8001cea:	4b35      	ldr	r3, [pc, #212]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a35      	ldr	r2, [pc, #212]	@ (8001dc4 <sin_wave_configure_weights+0x100>)
 8001cf0:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sin_wave_weights_map[0] + 0);
 8001cf2:	4b33      	ldr	r3, [pc, #204]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a33      	ldr	r2, [pc, #204]	@ (8001dc4 <sin_wave_configure_weights+0x100>)
 8001cf8:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001cfa:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <sin_wave_configure_weights+0x104>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d02:	4a31      	ldr	r2, [pc, #196]	@ (8001dc8 <sin_wave_configure_weights+0x104>)
 8001d04:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sin_wave_weights_map[0] + 64);
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3340      	adds	r3, #64	@ 0x40
 8001d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc8 <sin_wave_configure_weights+0x104>)
 8001d0e:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sin_wave_weights_map[0] + 64);
 8001d10:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3340      	adds	r3, #64	@ 0x40
 8001d16:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc8 <sin_wave_configure_weights+0x104>)
 8001d18:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dcc <sin_wave_configure_weights+0x108>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d22:	4a2a      	ldr	r2, [pc, #168]	@ (8001dcc <sin_wave_configure_weights+0x108>)
 8001d24:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sin_wave_weights_map[0] + 192);
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	33c0      	adds	r3, #192	@ 0xc0
 8001d2c:	4a27      	ldr	r2, [pc, #156]	@ (8001dcc <sin_wave_configure_weights+0x108>)
 8001d2e:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sin_wave_weights_map[0] + 128);
 8001d30:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3380      	adds	r3, #128	@ 0x80
 8001d36:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <sin_wave_configure_weights+0x108>)
 8001d38:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <sin_wave_configure_weights+0x10c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d42:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <sin_wave_configure_weights+0x10c>)
 8001d44:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sin_wave_weights_map[0] + 320);
 8001d46:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001d4e:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <sin_wave_configure_weights+0x10c>)
 8001d50:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sin_wave_weights_map[0] + 320);
 8001d52:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd0 <sin_wave_configure_weights+0x10c>)
 8001d5c:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <sin_wave_configure_weights+0x110>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d66:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <sin_wave_configure_weights+0x110>)
 8001d68:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sin_wave_weights_map[0] + 384);
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001d72:	4a18      	ldr	r2, [pc, #96]	@ (8001dd4 <sin_wave_configure_weights+0x110>)
 8001d74:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sin_wave_weights_map[0] + 384);
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001d7e:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <sin_wave_configure_weights+0x110>)
 8001d80:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <sin_wave_configure_weights+0x114>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d8a:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <sin_wave_configure_weights+0x114>)
 8001d8c:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sin_wave_weights_map[0] + 448);
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <sin_wave_configure_weights+0x114>)
 8001d98:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sin_wave_weights_map[0] + 448);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <sin_wave_configure_weights+0xfc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8001da2:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <sin_wave_configure_weights+0x114>)
 8001da4:	60d3      	str	r3, [r2, #12]
    return true;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e005      	b.n	8001db6 <sin_wave_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8001daa:	2212      	movs	r2, #18
 8001dac:	2130      	movs	r1, #48	@ 0x30
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fb28 	bl	8002404 <ai_platform_network_set_error>
  return false;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000750 	.word	0x20000750
 8001dc4:	20000070 	.word	0x20000070
 8001dc8:	20000080 	.word	0x20000080
 8001dcc:	20000090 	.word	0x20000090
 8001dd0:	200000a0 	.word	0x200000a0
 8001dd4:	200000b0 	.word	0x200000b0
 8001dd8:	200000c0 	.word	0x200000c0

08001ddc <ai_sin_wave_get_report>:


AI_API_ENTRY
ai_bool ai_sin_wave_get_report(
  ai_handle network, ai_network_report* report)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0a6      	sub	sp, #152	@ 0x98
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 faf8 	bl	80023dc <ai_platform_context_acquire>
 8001dec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d04a      	beq.n	8001e8c <ai_sin_wave_get_report+0xb0>
 8001df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d046      	beq.n	8001e8c <ai_sin_wave_get_report+0xb0>
  {
    ai_network_report r = {
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	2288      	movs	r2, #136	@ 0x88
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 f860 	bl	8003ecc <memset>
 8001e0c:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <ai_sin_wave_get_report+0xbc>)
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <ai_sin_wave_get_report+0xc0>)
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <ai_sin_wave_get_report+0xc4>)
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <ai_sin_wave_get_report+0xc8>)
 8001e1a:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_SIN_WAVE_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8001e1c:	f000 faaa 	bl	8002374 <ai_platform_runtime_get_revision>
 8001e20:	4603      	mov	r3, r0
    ai_network_report r = {
 8001e22:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8001e24:	f000 faaa 	bl	800237c <ai_platform_runtime_get_version>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <ai_sin_wave_get_report+0xcc>)
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	2302      	movs	r3, #2
 8001e32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8001e36:	f000 faa5 	bl	8002384 <ai_platform_api_get_version>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8001e3e:	f000 fab7 	bl	80023b0 <ai_platform_interface_api_get_version>
 8001e42:	4603      	mov	r3, r0
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 8001e46:	f240 1261 	movw	r2, #353	@ 0x161
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <ai_sin_wave_get_report+0xd0>)
 8001e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <ai_sin_wave_get_report+0xd4>)
 8001e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x77f33c27,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fbbe 	bl	80025e4 <ai_platform_api_get_network_report>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <ai_sin_wave_get_report+0x9c>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e00a      	b.n	8001e8e <ai_sin_wave_get_report+0xb2>

    *report = r;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	2288      	movs	r2, #136	@ 0x88
 8001e82:	4619      	mov	r1, r3
 8001e84:	f002 f84e 	bl	8003f24 <memcpy>
    return true;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <ai_sin_wave_get_report+0xb2>
  }
  return false;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3798      	adds	r7, #152	@ 0x98
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08003f60 	.word	0x08003f60
 8001e9c:	08003f6c 	.word	0x08003f6c
 8001ea0:	08003f90 	.word	0x08003f90
 8001ea4:	08003fac 	.word	0x08003fac
 8001ea8:	08003fc4 	.word	0x08003fc4
 8001eac:	a1facade 	.word	0xa1facade
 8001eb0:	77f33c27 	.word	0x77f33c27

08001eb4 <ai_sin_wave_get_error>:


AI_API_ENTRY
ai_error ai_sin_wave_get_error(ai_handle network)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fa95 	bl	80023ec <ai_platform_network_get_error>
 8001ec2:	4603      	mov	r3, r0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <ai_sin_wave_create>:


AI_API_ENTRY
ai_error ai_sin_wave_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2305      	movs	r3, #5
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <ai_sin_wave_create+0x28>)
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fd2b 	bl	8002940 <ai_platform_network_create>
 8001eea:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200005f4 	.word	0x200005f4

08001ef8 <ai_sin_wave_create_and_init>:


AI_API_ENTRY
ai_error ai_sin_wave_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b094      	sub	sp, #80	@ 0x50
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_sin_wave_create(network, AI_SIN_WAVE_DATA_CONFIG);
 8001f04:	2100      	movs	r1, #0
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff ffe0 	bl	8001ecc <ai_sin_wave_create>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8001f10:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <ai_sin_wave_create_and_init+0x24>
    return err;
 8001f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f1a:	e067      	b.n	8001fec <ai_sin_wave_create_and_init+0xf4>
  }
  
  if (ai_sin_wave_data_params_get(&params) != true) {
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f8e7 	bl	80020f4 <ai_sin_wave_data_params_get>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <ai_sin_wave_create_and_init+0x4c>
    err = ai_sin_wave_get_error(*network);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ffbc 	bl	8001eb4 <ai_sin_wave_get_error>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8001f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f42:	e053      	b.n	8001fec <ai_sin_wave_create_and_init+0xf4>
  }
#if defined(AI_SIN_WAVE_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001f4a:	e012      	b.n	8001f72 <ai_sin_wave_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8001f4c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8001f50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	330c      	adds	r3, #12
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f92c 	bl	80021c0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001f68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <ai_sin_wave_create_and_init+0x8a>
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3e4      	bcc.n	8001f4c <ai_sin_wave_create_and_init+0x54>
  }
#endif
#if defined(AI_SIN_WAVE_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001f88:	e012      	b.n	8001fb0 <ai_sin_wave_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001f8a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8001f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f90d 	bl	80021c0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001fa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001faa:	3301      	adds	r3, #1
 8001fac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <ai_sin_wave_create_and_init+0xc8>
 8001fb6:	8afb      	ldrh	r3, [r7, #22]
 8001fb8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3e4      	bcc.n	8001f8a <ai_sin_wave_create_and_init+0x92>
  }
#endif
  if (ai_sin_wave_init(*network, &params) != true) {
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f846 	bl	800205c <ai_sin_wave_init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f083 0301 	eor.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <ai_sin_wave_create_and_init+0xf2>
    err = ai_sin_wave_get_error(*network);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff67 	bl	8001eb4 <ai_sin_wave_get_error>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8001fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3750      	adds	r7, #80	@ 0x50
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <ai_sin_wave_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_sin_wave_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d104      	bne.n	800200e <ai_sin_wave_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <ai_sin_wave_inputs_get+0x2c>)
 8002006:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a06      	ldr	r2, [pc, #24]	@ (8002024 <ai_sin_wave_inputs_get+0x30>)
 800200c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f9fd 	bl	8002410 <ai_platform_inputs_get>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200005f4 	.word	0x200005f4
 8002024:	a1c00100 	.word	0xa1c00100

08002028 <ai_sin_wave_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_sin_wave_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <ai_sin_wave_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <ai_sin_wave_outputs_get+0x2c>)
 800203a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a06      	ldr	r2, [pc, #24]	@ (8002058 <ai_sin_wave_outputs_get+0x30>)
 8002040:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fa59 	bl	80024fc <ai_platform_outputs_get>
 800204a:	4603      	mov	r3, r0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200005f4 	.word	0x200005f4
 8002058:	a1c00100 	.word	0xa1c00100

0800205c <ai_sin_wave_init>:


AI_API_ENTRY
ai_bool ai_sin_wave_init(
  ai_handle network, const ai_network_params* params)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fcab 	bl	80029c4 <ai_platform_network_init>
 800206e:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8002070:	2301      	movs	r3, #1
 8002072:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <ai_sin_wave_init+0x22>
 800207a:	2300      	movs	r3, #0
 800207c:	e026      	b.n	80020cc <ai_sin_wave_init+0x70>
  ok &= sin_wave_configure_weights(net_ctx, params);
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fe1f 	bl	8001cc4 <sin_wave_configure_weights>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	72fb      	strb	r3, [r7, #11]
  ok &= sin_wave_configure_activations(net_ctx, params);
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff fdb2 	bl	8001c04 <sin_wave_configure_activations>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fd54 	bl	8002b60 <ai_platform_network_post_init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <ai_sin_wave_run>:


AI_API_ENTRY
ai_i32 ai_sin_wave_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fd6b 	bl	8002bc0 <ai_platform_network_process>
 80020ea:	4603      	mov	r3, r0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <ai_sin_wave_data_params_get>:
 * @ingroup sin_wave_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_sin_wave_data_params_get(ai_network_params* params)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <ai_sin_wave_data_params_get+0x12>
 8002102:	2300      	movs	r3, #0
 8002104:	e016      	b.n	8002134 <ai_sin_wave_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8002106:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <ai_sin_wave_data_params_get+0x48>)
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002110:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SIN_WAVE_DATA_ACTIVATIONS_COUNT, g_sin_wave_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002114:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <ai_sin_wave_data_params_get+0x4c>)
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800211e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SIN_WAVE_DATA_WEIGHTS_COUNT, g_sin_wave_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002122:	f107 0210 	add.w	r2, r7, #16
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8ff 	bl	8002330 <ai_platform_bind_network_params>
 8002132:	4603      	mov	r3, r0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	08003fe8 	.word	0x08003fe8
 8002140:	08003ff0 	.word	0x08003ff0

08002144 <ai_buffer_get_size>:
 8002144:	b378      	cbz	r0, 80021a6 <ai_buffer_get_size+0x62>
 8002146:	b410      	push	{r4}
 8002148:	6803      	ldr	r3, [r0, #0]
 800214a:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <ai_buffer_get_size+0x64>)
 800214c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8002150:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002154:	4293      	cmp	r3, r2
 8002156:	d01e      	beq.n	8002196 <ai_buffer_get_size+0x52>
 8002158:	6984      	ldr	r4, [r0, #24]
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	7d03      	ldrb	r3, [r0, #20]
 800215e:	6941      	ldr	r1, [r0, #20]
 8002160:	f1a3 0301 	sub.w	r3, r3, #1
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800216e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8002172:	da0b      	bge.n	800218c <ai_buffer_get_size+0x48>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <ai_buffer_get_size+0x3a>
 8002178:	2802      	cmp	r0, #2
 800217a:	d007      	beq.n	800218c <ai_buffer_get_size+0x48>
 800217c:	2302      	movs	r3, #2
 800217e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002182:	3301      	adds	r3, #1
 8002184:	4298      	cmp	r0, r3
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	d1f3      	bne.n	8002174 <ai_buffer_get_size+0x30>
 800218c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	2900      	cmp	r1, #0
 8002198:	d0de      	beq.n	8002158 <ai_buffer_get_size+0x14>
 800219a:	6984      	ldr	r4, [r0, #24]
 800219c:	6862      	ldr	r2, [r4, #4]
 800219e:	321f      	adds	r2, #31
 80021a0:	f022 021f 	bic.w	r2, r2, #31
 80021a4:	e7da      	b.n	800215c <ai_buffer_get_size+0x18>
 80021a6:	4770      	bx	lr
 80021a8:	000400c0 	.word	0x000400c0

080021ac <ai_buffer_array_sane>:
 80021ac:	b138      	cbz	r0, 80021be <ai_buffer_array_sane+0x12>
 80021ae:	6843      	ldr	r3, [r0, #4]
 80021b0:	b123      	cbz	r3, 80021bc <ai_buffer_array_sane+0x10>
 80021b2:	8840      	ldrh	r0, [r0, #2]
 80021b4:	3800      	subs	r0, #0
 80021b6:	bf18      	it	ne
 80021b8:	2001      	movne	r0, #1
 80021ba:	4770      	bx	lr
 80021bc:	4618      	mov	r0, r3
 80021be:	4770      	bx	lr

080021c0 <ai_buffer_array_item_set_address>:
 80021c0:	b150      	cbz	r0, 80021d8 <ai_buffer_array_item_set_address+0x18>
 80021c2:	6843      	ldr	r3, [r0, #4]
 80021c4:	b14b      	cbz	r3, 80021da <ai_buffer_array_item_set_address+0x1a>
 80021c6:	8840      	ldrh	r0, [r0, #2]
 80021c8:	b900      	cbnz	r0, 80021cc <ai_buffer_array_item_set_address+0xc>
 80021ca:	4770      	bx	lr
 80021cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80021d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80021d4:	2001      	movs	r0, #1
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	4770      	bx	lr
 80021da:	4618      	mov	r0, r3
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <ai_platform_get_weights_map>:
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d037      	beq.n	8002254 <ai_platform_get_weights_map+0x74>
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	4604      	mov	r4, r0
 80021e8:	b1a0      	cbz	r0, 8002214 <ai_platform_get_weights_map+0x34>
 80021ea:	460f      	mov	r7, r1
 80021ec:	b191      	cbz	r1, 8002214 <ai_platform_get_weights_map+0x34>
 80021ee:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <ai_platform_get_weights_map+0xa4>)
 80021f0:	6810      	ldr	r0, [r2, #0]
 80021f2:	4298      	cmp	r0, r3
 80021f4:	4615      	mov	r5, r2
 80021f6:	d00f      	beq.n	8002218 <ai_platform_get_weights_map+0x38>
 80021f8:	6855      	ldr	r5, [r2, #4]
 80021fa:	b15d      	cbz	r5, 8002214 <ai_platform_get_weights_map+0x34>
 80021fc:	682e      	ldr	r6, [r5, #0]
 80021fe:	429e      	cmp	r6, r3
 8002200:	d02a      	beq.n	8002258 <ai_platform_get_weights_map+0x78>
 8002202:	f1a1 0001 	sub.w	r0, r1, #1
 8002206:	6025      	str	r5, [r4, #0]
 8002208:	fab0 f080 	clz	r0, r0
 800220c:	0940      	lsrs	r0, r0, #5
 800220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002210:	42a7      	cmp	r7, r4
 8002212:	d034      	beq.n	800227e <ai_platform_get_weights_map+0x9e>
 8002214:	2000      	movs	r0, #0
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002218:	1d10      	adds	r0, r2, #4
 800221a:	f7ff ffc7 	bl	80021ac <ai_buffer_array_sane>
 800221e:	2800      	cmp	r0, #0
 8002220:	d0f8      	beq.n	8002214 <ai_platform_get_weights_map+0x34>
 8002222:	88eb      	ldrh	r3, [r5, #6]
 8002224:	429f      	cmp	r7, r3
 8002226:	d1f5      	bne.n	8002214 <ai_platform_get_weights_map+0x34>
 8002228:	f04f 0c00 	mov.w	ip, #0
 800222c:	1f20      	subs	r0, r4, #4
 800222e:	46e6      	mov	lr, ip
 8002230:	68ab      	ldr	r3, [r5, #8]
 8002232:	4463      	add	r3, ip
 8002234:	f10c 0c1c 	add.w	ip, ip, #28
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b12b      	cbz	r3, 8002248 <ai_platform_get_weights_map+0x68>
 800223c:	f10e 0e01 	add.w	lr, lr, #1
 8002240:	4577      	cmp	r7, lr
 8002242:	f840 3f04 	str.w	r3, [r0, #4]!
 8002246:	d1f3      	bne.n	8002230 <ai_platform_get_weights_map+0x50>
 8002248:	eba7 000e 	sub.w	r0, r7, lr
 800224c:	fab0 f080 	clz	r0, r0
 8002250:	0940      	lsrs	r0, r0, #5
 8002252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002254:	2000      	movs	r0, #0
 8002256:	4770      	bx	lr
 8002258:	1f20      	subs	r0, r4, #4
 800225a:	462a      	mov	r2, r5
 800225c:	2400      	movs	r4, #0
 800225e:	e000      	b.n	8002262 <ai_platform_get_weights_map+0x82>
 8002260:	461c      	mov	r4, r3
 8002262:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002266:	42b3      	cmp	r3, r6
 8002268:	d0d2      	beq.n	8002210 <ai_platform_get_weights_map+0x30>
 800226a:	f840 3f04 	str.w	r3, [r0, #4]!
 800226e:	1c63      	adds	r3, r4, #1
 8002270:	429f      	cmp	r7, r3
 8002272:	d1f5      	bne.n	8002260 <ai_platform_get_weights_map+0x80>
 8002274:	3402      	adds	r4, #2
 8002276:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800227a:	42b3      	cmp	r3, r6
 800227c:	d1ca      	bne.n	8002214 <ai_platform_get_weights_map+0x34>
 800227e:	2001      	movs	r0, #1
 8002280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002282:	bf00      	nop
 8002284:	a1facade 	.word	0xa1facade

08002288 <ai_platform_get_activations_map>:
 8002288:	2a00      	cmp	r2, #0
 800228a:	d038      	beq.n	80022fe <ai_platform_get_activations_map+0x76>
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	4604      	mov	r4, r0
 8002290:	b1a0      	cbz	r0, 80022bc <ai_platform_get_activations_map+0x34>
 8002292:	460f      	mov	r7, r1
 8002294:	b191      	cbz	r1, 80022bc <ai_platform_get_activations_map+0x34>
 8002296:	4b25      	ldr	r3, [pc, #148]	@ (800232c <ai_platform_get_activations_map+0xa4>)
 8002298:	6810      	ldr	r0, [r2, #0]
 800229a:	4298      	cmp	r0, r3
 800229c:	4615      	mov	r5, r2
 800229e:	d00f      	beq.n	80022c0 <ai_platform_get_activations_map+0x38>
 80022a0:	6a15      	ldr	r5, [r2, #32]
 80022a2:	b15d      	cbz	r5, 80022bc <ai_platform_get_activations_map+0x34>
 80022a4:	682e      	ldr	r6, [r5, #0]
 80022a6:	429e      	cmp	r6, r3
 80022a8:	d02b      	beq.n	8002302 <ai_platform_get_activations_map+0x7a>
 80022aa:	f1a1 0001 	sub.w	r0, r1, #1
 80022ae:	6025      	str	r5, [r4, #0]
 80022b0:	fab0 f080 	clz	r0, r0
 80022b4:	0940      	lsrs	r0, r0, #5
 80022b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b8:	42a7      	cmp	r7, r4
 80022ba:	d035      	beq.n	8002328 <ai_platform_get_activations_map+0xa0>
 80022bc:	2000      	movs	r0, #0
 80022be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c0:	f102 000c 	add.w	r0, r2, #12
 80022c4:	f7ff ff72 	bl	80021ac <ai_buffer_array_sane>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d0f7      	beq.n	80022bc <ai_platform_get_activations_map+0x34>
 80022cc:	89eb      	ldrh	r3, [r5, #14]
 80022ce:	429f      	cmp	r7, r3
 80022d0:	d1f4      	bne.n	80022bc <ai_platform_get_activations_map+0x34>
 80022d2:	f04f 0c00 	mov.w	ip, #0
 80022d6:	1f20      	subs	r0, r4, #4
 80022d8:	46e6      	mov	lr, ip
 80022da:	692b      	ldr	r3, [r5, #16]
 80022dc:	4463      	add	r3, ip
 80022de:	f10c 0c1c 	add.w	ip, ip, #28
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	b12b      	cbz	r3, 80022f2 <ai_platform_get_activations_map+0x6a>
 80022e6:	f10e 0e01 	add.w	lr, lr, #1
 80022ea:	4577      	cmp	r7, lr
 80022ec:	f840 3f04 	str.w	r3, [r0, #4]!
 80022f0:	d1f3      	bne.n	80022da <ai_platform_get_activations_map+0x52>
 80022f2:	eba7 000e 	sub.w	r0, r7, lr
 80022f6:	fab0 f080 	clz	r0, r0
 80022fa:	0940      	lsrs	r0, r0, #5
 80022fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022fe:	2000      	movs	r0, #0
 8002300:	4770      	bx	lr
 8002302:	1f20      	subs	r0, r4, #4
 8002304:	462a      	mov	r2, r5
 8002306:	2400      	movs	r4, #0
 8002308:	e000      	b.n	800230c <ai_platform_get_activations_map+0x84>
 800230a:	461c      	mov	r4, r3
 800230c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002310:	42b3      	cmp	r3, r6
 8002312:	d0d1      	beq.n	80022b8 <ai_platform_get_activations_map+0x30>
 8002314:	f840 3f04 	str.w	r3, [r0, #4]!
 8002318:	1c63      	adds	r3, r4, #1
 800231a:	429f      	cmp	r7, r3
 800231c:	d1f5      	bne.n	800230a <ai_platform_get_activations_map+0x82>
 800231e:	3402      	adds	r4, #2
 8002320:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002324:	42b3      	cmp	r3, r6
 8002326:	d1c9      	bne.n	80022bc <ai_platform_get_activations_map+0x34>
 8002328:	2001      	movs	r0, #1
 800232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232c:	a1facade 	.word	0xa1facade

08002330 <ai_platform_bind_network_params>:
 8002330:	b1a0      	cbz	r0, 800235c <ai_platform_bind_network_params+0x2c>
 8002332:	b1b1      	cbz	r1, 8002362 <ai_platform_bind_network_params+0x32>
 8002334:	b1c2      	cbz	r2, 8002368 <ai_platform_bind_network_params+0x38>
 8002336:	b410      	push	{r4}
 8002338:	4603      	mov	r3, r0
 800233a:	4c0d      	ldr	r4, [pc, #52]	@ (8002370 <ai_platform_bind_network_params+0x40>)
 800233c:	f843 4b04 	str.w	r4, [r3], #4
 8002340:	f100 0c0c 	add.w	ip, r0, #12
 8002344:	c903      	ldmia	r1, {r0, r1}
 8002346:	e883 0003 	stmia.w	r3, {r0, r1}
 800234a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800234e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002352:	2301      	movs	r3, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	4603      	mov	r3, r0
 800235e:	4618      	mov	r0, r3
 8002360:	4770      	bx	lr
 8002362:	460b      	mov	r3, r1
 8002364:	4618      	mov	r0, r3
 8002366:	4770      	bx	lr
 8002368:	4613      	mov	r3, r2
 800236a:	4618      	mov	r0, r3
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	a1facade 	.word	0xa1facade

08002374 <ai_platform_runtime_get_revision>:
 8002374:	4800      	ldr	r0, [pc, #0]	@ (8002378 <ai_platform_runtime_get_revision+0x4>)
 8002376:	4770      	bx	lr
 8002378:	08004228 	.word	0x08004228

0800237c <ai_platform_runtime_get_version>:
 800237c:	b082      	sub	sp, #8
 800237e:	200a      	movs	r0, #10
 8002380:	b002      	add	sp, #8
 8002382:	4770      	bx	lr

08002384 <ai_platform_api_get_version>:
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <ai_platform_api_get_version+0x28>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2000      	movs	r0, #0
 800238a:	b2da      	uxtb	r2, r3
 800238c:	f362 0007 	bfi	r0, r2, #0, #8
 8002390:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002394:	f362 200f 	bfi	r0, r2, #8, #8
 8002398:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800239c:	f362 4017 	bfi	r0, r2, #16, #8
 80023a0:	0e1b      	lsrs	r3, r3, #24
 80023a2:	b082      	sub	sp, #8
 80023a4:	f363 601f 	bfi	r0, r3, #24, #8
 80023a8:	b002      	add	sp, #8
 80023aa:	4770      	bx	lr
 80023ac:	0800422c 	.word	0x0800422c

080023b0 <ai_platform_interface_api_get_version>:
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <ai_platform_interface_api_get_version+0x28>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2000      	movs	r0, #0
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	f362 0007 	bfi	r0, r2, #0, #8
 80023bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80023c0:	f362 200f 	bfi	r0, r2, #8, #8
 80023c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80023c8:	f362 4017 	bfi	r0, r2, #16, #8
 80023cc:	0e1b      	lsrs	r3, r3, #24
 80023ce:	b082      	sub	sp, #8
 80023d0:	f363 601f 	bfi	r0, r3, #24, #8
 80023d4:	b002      	add	sp, #8
 80023d6:	4770      	bx	lr
 80023d8:	08004230 	.word	0x08004230

080023dc <ai_platform_context_acquire>:
 80023dc:	6802      	ldr	r2, [r0, #0]
 80023de:	4b02      	ldr	r3, [pc, #8]	@ (80023e8 <ai_platform_context_acquire+0xc>)
 80023e0:	4393      	bics	r3, r2
 80023e2:	bf18      	it	ne
 80023e4:	2000      	movne	r0, #0
 80023e6:	4770      	bx	lr
 80023e8:	a1c00100 	.word	0xa1c00100

080023ec <ai_platform_network_get_error>:
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <ai_platform_network_get_error+0x14>)
 80023ee:	6802      	ldr	r2, [r0, #0]
 80023f0:	4393      	bics	r3, r2
 80023f2:	d102      	bne.n	80023fa <ai_platform_network_get_error+0xe>
 80023f4:	300c      	adds	r0, #12
 80023f6:	f000 be25 	b.w	8003044 <core_get_error>
 80023fa:	f241 0010 	movw	r0, #4112	@ 0x1010
 80023fe:	4770      	bx	lr
 8002400:	a1c00100 	.word	0xa1c00100

08002404 <ai_platform_network_set_error>:
 8002404:	b110      	cbz	r0, 800240c <ai_platform_network_set_error+0x8>
 8002406:	300c      	adds	r0, #12
 8002408:	f000 be22 	b.w	8003050 <core_set_error>
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop

08002410 <ai_platform_inputs_get>:
 8002410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002414:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <ai_platform_inputs_get+0xe8>)
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	b085      	sub	sp, #20
 800241a:	4393      	bics	r3, r2
 800241c:	9003      	str	r0, [sp, #12]
 800241e:	9102      	str	r1, [sp, #8]
 8002420:	d160      	bne.n	80024e4 <ai_platform_inputs_get+0xd4>
 8002422:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002424:	2b00      	cmp	r3, #0
 8002426:	d04f      	beq.n	80024c8 <ai_platform_inputs_get+0xb8>
 8002428:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800242c:	f1ba 0f00 	cmp.w	sl, #0
 8002430:	d04a      	beq.n	80024c8 <ai_platform_inputs_get+0xb8>
 8002432:	f04f 0b00 	mov.w	fp, #0
 8002436:	465d      	mov	r5, fp
 8002438:	e016      	b.n	8002468 <ai_platform_inputs_get+0x58>
 800243a:	9901      	ldr	r1, [sp, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	507a      	str	r2, [r7, r1]
 8002440:	69b1      	ldr	r1, [r6, #24]
 8002442:	684e      	ldr	r6, [r1, #4]
 8002444:	60a3      	str	r3, [r4, #8]
 8002446:	f04f 0201 	mov.w	r2, #1
 800244a:	7522      	strb	r2, [r4, #20]
 800244c:	6961      	ldr	r1, [r4, #20]
 800244e:	6020      	str	r0, [r4, #0]
 8002450:	f369 211f 	bfi	r1, r9, #8, #24
 8002454:	2300      	movs	r3, #0
 8002456:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800245a:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800245e:	f8c4 c004 	str.w	ip, [r4, #4]
 8002462:	3501      	adds	r5, #1
 8002464:	f10b 0b1c 	add.w	fp, fp, #28
 8002468:	f8ba 3000 	ldrh.w	r3, [sl]
 800246c:	42ab      	cmp	r3, r5
 800246e:	b2aa      	uxth	r2, r5
 8002470:	d93c      	bls.n	80024ec <ai_platform_inputs_get+0xdc>
 8002472:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002476:	00e9      	lsls	r1, r5, #3
 8002478:	9101      	str	r1, [sp, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d036      	beq.n	80024ec <ai_platform_inputs_get+0xdc>
 800247e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002482:	2e00      	cmp	r6, #0
 8002484:	d032      	beq.n	80024ec <ai_platform_inputs_get+0xdc>
 8002486:	f8da 3008 	ldr.w	r3, [sl, #8]
 800248a:	69b2      	ldr	r2, [r6, #24]
 800248c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8002490:	6810      	ldr	r0, [r2, #0]
 8002492:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002496:	68b3      	ldr	r3, [r6, #8]
 8002498:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800249c:	f001 fc64 	bl	8003d68 <ai_array_to_buffer_fmt>
 80024a0:	69b1      	ldr	r1, [r6, #24]
 80024a2:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80024a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80024aa:	445c      	add	r4, fp
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0c8      	beq.n	8002442 <ai_platform_inputs_get+0x32>
 80024b0:	2100      	movs	r1, #0
 80024b2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80024b6:	6831      	ldr	r1, [r6, #0]
 80024b8:	6059      	str	r1, [r3, #4]
 80024ba:	b111      	cbz	r1, 80024c2 <ai_platform_inputs_get+0xb2>
 80024bc:	8849      	ldrh	r1, [r1, #2]
 80024be:	2900      	cmp	r1, #0
 80024c0:	d1bb      	bne.n	800243a <ai_platform_inputs_get+0x2a>
 80024c2:	69b1      	ldr	r1, [r6, #24]
 80024c4:	2300      	movs	r3, #0
 80024c6:	e7bc      	b.n	8002442 <ai_platform_inputs_get+0x32>
 80024c8:	9803      	ldr	r0, [sp, #12]
 80024ca:	2218      	movs	r2, #24
 80024cc:	2111      	movs	r1, #17
 80024ce:	300c      	adds	r0, #12
 80024d0:	f000 fdbe 	bl	8003050 <core_set_error>
 80024d4:	2200      	movs	r2, #0
 80024d6:	4610      	mov	r0, r2
 80024d8:	9b02      	ldr	r3, [sp, #8]
 80024da:	b103      	cbz	r3, 80024de <ai_platform_inputs_get+0xce>
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	b005      	add	sp, #20
 80024e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e4:	2000      	movs	r0, #0
 80024e6:	b005      	add	sp, #20
 80024e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d0eb      	beq.n	80024c8 <ai_platform_inputs_get+0xb8>
 80024f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80024f4:	6858      	ldr	r0, [r3, #4]
 80024f6:	e7ef      	b.n	80024d8 <ai_platform_inputs_get+0xc8>
 80024f8:	a1c00100 	.word	0xa1c00100

080024fc <ai_platform_outputs_get>:
 80024fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002500:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <ai_platform_outputs_get+0xe4>)
 8002502:	6802      	ldr	r2, [r0, #0]
 8002504:	b085      	sub	sp, #20
 8002506:	4393      	bics	r3, r2
 8002508:	9003      	str	r0, [sp, #12]
 800250a:	9102      	str	r1, [sp, #8]
 800250c:	d15d      	bne.n	80025ca <ai_platform_outputs_get+0xce>
 800250e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002510:	2b01      	cmp	r3, #1
 8002512:	d94c      	bls.n	80025ae <ai_platform_outputs_get+0xb2>
 8002514:	f04f 0b00 	mov.w	fp, #0
 8002518:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800251c:	465d      	mov	r5, fp
 800251e:	46d8      	mov	r8, fp
 8002520:	e016      	b.n	8002550 <ai_platform_outputs_get+0x54>
 8002522:	9a01      	ldr	r2, [sp, #4]
 8002524:	2101      	movs	r1, #1
 8002526:	50b9      	str	r1, [r7, r2]
 8002528:	69b2      	ldr	r2, [r6, #24]
 800252a:	6856      	ldr	r6, [r2, #4]
 800252c:	6020      	str	r0, [r4, #0]
 800252e:	f04f 0201 	mov.w	r2, #1
 8002532:	7522      	strb	r2, [r4, #20]
 8002534:	6960      	ldr	r0, [r4, #20]
 8002536:	f8c4 c004 	str.w	ip, [r4, #4]
 800253a:	f369 201f 	bfi	r0, r9, #8, #24
 800253e:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8002542:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8002546:	9b00      	ldr	r3, [sp, #0]
 8002548:	61a3      	str	r3, [r4, #24]
 800254a:	3501      	adds	r5, #1
 800254c:	f10b 0b1c 	add.w	fp, fp, #28
 8002550:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002554:	42ab      	cmp	r3, r5
 8002556:	b2aa      	uxth	r2, r5
 8002558:	d93b      	bls.n	80025d2 <ai_platform_outputs_get+0xd6>
 800255a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800255e:	00e9      	lsls	r1, r5, #3
 8002560:	9101      	str	r1, [sp, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d035      	beq.n	80025d2 <ai_platform_outputs_get+0xd6>
 8002566:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800256a:	2e00      	cmp	r6, #0
 800256c:	d031      	beq.n	80025d2 <ai_platform_outputs_get+0xd6>
 800256e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8002572:	69b2      	ldr	r2, [r6, #24]
 8002574:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002578:	68b3      	ldr	r3, [r6, #8]
 800257a:	6810      	ldr	r0, [r2, #0]
 800257c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8002580:	68f3      	ldr	r3, [r6, #12]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f001 fbf0 	bl	8003d68 <ai_array_to_buffer_fmt>
 8002588:	69b2      	ldr	r2, [r6, #24]
 800258a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800258e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8002592:	445c      	add	r4, fp
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0c8      	beq.n	800252a <ai_platform_outputs_get+0x2e>
 8002598:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800259c:	6832      	ldr	r2, [r6, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	b112      	cbz	r2, 80025a8 <ai_platform_outputs_get+0xac>
 80025a2:	8852      	ldrh	r2, [r2, #2]
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	d1bc      	bne.n	8002522 <ai_platform_outputs_get+0x26>
 80025a8:	69b2      	ldr	r2, [r6, #24]
 80025aa:	2300      	movs	r3, #0
 80025ac:	e7bd      	b.n	800252a <ai_platform_outputs_get+0x2e>
 80025ae:	9803      	ldr	r0, [sp, #12]
 80025b0:	2218      	movs	r2, #24
 80025b2:	2111      	movs	r1, #17
 80025b4:	300c      	adds	r0, #12
 80025b6:	f000 fd4b 	bl	8003050 <core_set_error>
 80025ba:	2200      	movs	r2, #0
 80025bc:	4610      	mov	r0, r2
 80025be:	9b02      	ldr	r3, [sp, #8]
 80025c0:	b103      	cbz	r3, 80025c4 <ai_platform_outputs_get+0xc8>
 80025c2:	801a      	strh	r2, [r3, #0]
 80025c4:	b005      	add	sp, #20
 80025c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ca:	2000      	movs	r0, #0
 80025cc:	b005      	add	sp, #20
 80025ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d0eb      	beq.n	80025ae <ai_platform_outputs_get+0xb2>
 80025d6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80025da:	6858      	ldr	r0, [r3, #4]
 80025dc:	e7ef      	b.n	80025be <ai_platform_outputs_get+0xc2>
 80025de:	bf00      	nop
 80025e0:	a1c00100 	.word	0xa1c00100

080025e4 <ai_platform_api_get_network_report>:
 80025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e8:	4ba4      	ldr	r3, [pc, #656]	@ (800287c <ai_platform_api_get_network_report+0x298>)
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	b089      	sub	sp, #36	@ 0x24
 80025ee:	4393      	bics	r3, r2
 80025f0:	9002      	str	r0, [sp, #8]
 80025f2:	9103      	str	r1, [sp, #12]
 80025f4:	d164      	bne.n	80026c0 <ai_platform_api_get_network_report+0xdc>
 80025f6:	2900      	cmp	r1, #0
 80025f8:	d075      	beq.n	80026e6 <ai_platform_api_get_network_report+0x102>
 80025fa:	2400      	movs	r4, #0
 80025fc:	67cc      	str	r4, [r1, #124]	@ 0x7c
 80025fe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002600:	b143      	cbz	r3, 8002614 <ai_platform_api_get_network_report+0x30>
 8002602:	3401      	adds	r4, #1
 8002604:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d003      	beq.n	8002614 <ai_platform_api_get_network_report+0x30>
 800260c:	b112      	cbz	r2, 8002614 <ai_platform_api_get_network_report+0x30>
 800260e:	4613      	mov	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f6      	bne.n	8002602 <ai_platform_api_get_network_report+0x1e>
 8002614:	2c00      	cmp	r4, #0
 8002616:	f000 812a 	beq.w	800286e <ai_platform_api_get_network_report+0x28a>
 800261a:	9a02      	ldr	r2, [sp, #8]
 800261c:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 800261e:	2b00      	cmp	r3, #0
 8002620:	d053      	beq.n	80026ca <ai_platform_api_get_network_report+0xe6>
 8002622:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8002626:	f1ba 0f00 	cmp.w	sl, #0
 800262a:	d04e      	beq.n	80026ca <ai_platform_api_get_network_report+0xe6>
 800262c:	f04f 0b00 	mov.w	fp, #0
 8002630:	465d      	mov	r5, fp
 8002632:	e015      	b.n	8002660 <ai_platform_api_get_network_report+0x7c>
 8002634:	00e9      	lsls	r1, r5, #3
 8002636:	2201      	movs	r2, #1
 8002638:	507a      	str	r2, [r7, r1]
 800263a:	69b1      	ldr	r1, [r6, #24]
 800263c:	6849      	ldr	r1, [r1, #4]
 800263e:	60a3      	str	r3, [r4, #8]
 8002640:	f04f 0201 	mov.w	r2, #1
 8002644:	7522      	strb	r2, [r4, #20]
 8002646:	6963      	ldr	r3, [r4, #20]
 8002648:	6121      	str	r1, [r4, #16]
 800264a:	f369 231f 	bfi	r3, r9, #8, #24
 800264e:	e9c4 0c00 	strd	r0, ip, [r4]
 8002652:	e9c4 3805 	strd	r3, r8, [r4, #20]
 8002656:	2200      	movs	r2, #0
 8002658:	60e2      	str	r2, [r4, #12]
 800265a:	3501      	adds	r5, #1
 800265c:	f10b 0b1c 	add.w	fp, fp, #28
 8002660:	f8ba 3000 	ldrh.w	r3, [sl]
 8002664:	42ab      	cmp	r3, r5
 8002666:	b2aa      	uxth	r2, r5
 8002668:	d942      	bls.n	80026f0 <ai_platform_api_get_network_report+0x10c>
 800266a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03e      	beq.n	80026f0 <ai_platform_api_get_network_report+0x10c>
 8002672:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002676:	2e00      	cmp	r6, #0
 8002678:	d03a      	beq.n	80026f0 <ai_platform_api_get_network_report+0x10c>
 800267a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800267e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8002682:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002686:	69b3      	ldr	r3, [r6, #24]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	68b3      	ldr	r3, [r6, #8]
 800268c:	00ea      	lsls	r2, r5, #3
 800268e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8002692:	9201      	str	r2, [sp, #4]
 8002694:	f001 fb68 	bl	8003d68 <ai_array_to_buffer_fmt>
 8002698:	69b1      	ldr	r1, [r6, #24]
 800269a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800269e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80026a2:	445c      	add	r4, fp
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0c9      	beq.n	800263c <ai_platform_api_get_network_report+0x58>
 80026a8:	2100      	movs	r1, #0
 80026aa:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80026ae:	6831      	ldr	r1, [r6, #0]
 80026b0:	6059      	str	r1, [r3, #4]
 80026b2:	b111      	cbz	r1, 80026ba <ai_platform_api_get_network_report+0xd6>
 80026b4:	8849      	ldrh	r1, [r1, #2]
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d1bc      	bne.n	8002634 <ai_platform_api_get_network_report+0x50>
 80026ba:	69b1      	ldr	r1, [r6, #24]
 80026bc:	2300      	movs	r3, #0
 80026be:	e7bd      	b.n	800263c <ai_platform_api_get_network_report+0x58>
 80026c0:	2400      	movs	r4, #0
 80026c2:	4620      	mov	r0, r4
 80026c4:	b009      	add	sp, #36	@ 0x24
 80026c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	9802      	ldr	r0, [sp, #8]
 80026ce:	2400      	movs	r4, #0
 80026d0:	63dc      	str	r4, [r3, #60]	@ 0x3c
 80026d2:	871c      	strh	r4, [r3, #56]	@ 0x38
 80026d4:	2218      	movs	r2, #24
 80026d6:	2112      	movs	r1, #18
 80026d8:	300c      	adds	r0, #12
 80026da:	f000 fcb9 	bl	8003050 <core_set_error>
 80026de:	4620      	mov	r0, r4
 80026e0:	b009      	add	sp, #36	@ 0x24
 80026e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e6:	460c      	mov	r4, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	b009      	add	sp, #36	@ 0x24
 80026ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d0ea      	beq.n	80026ca <ai_platform_api_get_network_report+0xe6>
 80026f4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80026f8:	9903      	ldr	r1, [sp, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	63cb      	str	r3, [r1, #60]	@ 0x3c
 80026fe:	9b02      	ldr	r3, [sp, #8]
 8002700:	870a      	strh	r2, [r1, #56]	@ 0x38
 8002702:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002704:	2b01      	cmp	r3, #1
 8002706:	f240 80a4 	bls.w	8002852 <ai_platform_api_get_network_report+0x26e>
 800270a:	9b02      	ldr	r3, [sp, #8]
 800270c:	f04f 0900 	mov.w	r9, #0
 8002710:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8002714:	464d      	mov	r5, r9
 8002716:	46cb      	mov	fp, r9
 8002718:	e016      	b.n	8002748 <ai_platform_api_get_network_report+0x164>
 800271a:	2201      	movs	r2, #1
 800271c:	f84a 200e 	str.w	r2, [sl, lr]
 8002720:	69b1      	ldr	r1, [r6, #24]
 8002722:	684a      	ldr	r2, [r1, #4]
 8002724:	60a3      	str	r3, [r4, #8]
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	61a3      	str	r3, [r4, #24]
 800272a:	f04f 0301 	mov.w	r3, #1
 800272e:	7523      	strb	r3, [r4, #20]
 8002730:	6963      	ldr	r3, [r4, #20]
 8002732:	6122      	str	r2, [r4, #16]
 8002734:	e9c4 0c00 	strd	r0, ip, [r4]
 8002738:	f367 231f 	bfi	r3, r7, #8, #24
 800273c:	f8c4 b00c 	str.w	fp, [r4, #12]
 8002740:	3501      	adds	r5, #1
 8002742:	f109 091c 	add.w	r9, r9, #28
 8002746:	6163      	str	r3, [r4, #20]
 8002748:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800274c:	42ab      	cmp	r3, r5
 800274e:	b2aa      	uxth	r2, r5
 8002750:	d927      	bls.n	80027a2 <ai_platform_api_get_network_report+0x1be>
 8002752:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002756:	b323      	cbz	r3, 80027a2 <ai_platform_api_get_network_report+0x1be>
 8002758:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800275c:	b30e      	cbz	r6, 80027a2 <ai_platform_api_get_network_report+0x1be>
 800275e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002762:	68b7      	ldr	r7, [r6, #8]
 8002764:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8002768:	69b3      	ldr	r3, [r6, #24]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	68f3      	ldr	r3, [r6, #12]
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	f001 fafa 	bl	8003d68 <ai_array_to_buffer_fmt>
 8002774:	69b1      	ldr	r1, [r6, #24]
 8002776:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 800277a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800277e:	444c      	add	r4, r9
 8002780:	f3c7 2717 	ubfx	r7, r7, #8, #24
 8002784:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ca      	beq.n	8002722 <ai_platform_api_get_network_report+0x13e>
 800278c:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 8002790:	6831      	ldr	r1, [r6, #0]
 8002792:	6059      	str	r1, [r3, #4]
 8002794:	b111      	cbz	r1, 800279c <ai_platform_api_get_network_report+0x1b8>
 8002796:	8849      	ldrh	r1, [r1, #2]
 8002798:	2900      	cmp	r1, #0
 800279a:	d1be      	bne.n	800271a <ai_platform_api_get_network_report+0x136>
 800279c:	69b1      	ldr	r1, [r6, #24]
 800279e:	2300      	movs	r3, #0
 80027a0:	e7bf      	b.n	8002722 <ai_platform_api_get_network_report+0x13e>
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d055      	beq.n	8002852 <ai_platform_api_get_network_report+0x26e>
 80027a6:	9902      	ldr	r1, [sp, #8]
 80027a8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80027ac:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 80027b0:	9903      	ldr	r1, [sp, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	640b      	str	r3, [r1, #64]	@ 0x40
 80027b6:	874a      	strh	r2, [r1, #58]	@ 0x3a
 80027b8:	4630      	mov	r0, r6
 80027ba:	f7ff fcf7 	bl	80021ac <ai_buffer_array_sane>
 80027be:	4604      	mov	r4, r0
 80027c0:	b968      	cbnz	r0, 80027de <ai_platform_api_get_network_report+0x1fa>
 80027c2:	4630      	mov	r0, r6
 80027c4:	f7ff fcf2 	bl	80021ac <ai_buffer_array_sane>
 80027c8:	b148      	cbz	r0, 80027de <ai_platform_api_get_network_report+0x1fa>
 80027ca:	9b02      	ldr	r3, [sp, #8]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b133      	cbz	r3, 80027de <ai_platform_api_get_network_report+0x1fa>
 80027d0:	9802      	ldr	r0, [sp, #8]
 80027d2:	2213      	movs	r2, #19
 80027d4:	2111      	movs	r1, #17
 80027d6:	300c      	adds	r0, #12
 80027d8:	f000 fc3a 	bl	8003050 <core_set_error>
 80027dc:	e771      	b.n	80026c2 <ai_platform_api_get_network_report+0xde>
 80027de:	9d02      	ldr	r5, [sp, #8]
 80027e0:	f105 0720 	add.w	r7, r5, #32
 80027e4:	4638      	mov	r0, r7
 80027e6:	f7ff fce1 	bl	80021ac <ai_buffer_array_sane>
 80027ea:	4604      	mov	r4, r0
 80027ec:	b960      	cbnz	r0, 8002808 <ai_platform_api_get_network_report+0x224>
 80027ee:	4638      	mov	r0, r7
 80027f0:	f7ff fcdc 	bl	80021ac <ai_buffer_array_sane>
 80027f4:	b140      	cbz	r0, 8002808 <ai_platform_api_get_network_report+0x224>
 80027f6:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 80027f8:	b133      	cbz	r3, 8002808 <ai_platform_api_get_network_report+0x224>
 80027fa:	9802      	ldr	r0, [sp, #8]
 80027fc:	2212      	movs	r2, #18
 80027fe:	2111      	movs	r1, #17
 8002800:	300c      	adds	r0, #12
 8002802:	f000 fc25 	bl	8003050 <core_set_error>
 8002806:	e75c      	b.n	80026c2 <ai_platform_api_get_network_report+0xde>
 8002808:	9a02      	ldr	r2, [sp, #8]
 800280a:	9c03      	ldr	r4, [sp, #12]
 800280c:	6853      	ldr	r3, [r2, #4]
 800280e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <ai_platform_api_get_network_report+0x29c>)
 8002814:	6123      	str	r3, [r4, #16]
 8002816:	230a      	movs	r3, #10
 8002818:	6163      	str	r3, [r4, #20]
 800281a:	f240 2c01 	movw	ip, #513	@ 0x201
 800281e:	f240 5301 	movw	r3, #1281	@ 0x501
 8002822:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 8002826:	6890      	ldr	r0, [r2, #8]
 8002828:	f001 fb26 	bl	8003e78 <ai_platform_version_get>
 800282c:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <ai_platform_api_get_network_report+0x2a0>)
 800282e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002830:	6220      	str	r0, [r4, #32]
 8002832:	429a      	cmp	r2, r3
 8002834:	d128      	bne.n	8002888 <ai_platform_api_get_network_report+0x2a4>
 8002836:	e896 0003 	ldmia.w	r6, {r0, r1}
 800283a:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800283e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002842:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002846:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800284a:	e883 0003 	stmia.w	r3, {r0, r1}
 800284e:	2401      	movs	r4, #1
 8002850:	e737      	b.n	80026c2 <ai_platform_api_get_network_report+0xde>
 8002852:	9b03      	ldr	r3, [sp, #12]
 8002854:	9802      	ldr	r0, [sp, #8]
 8002856:	2400      	movs	r4, #0
 8002858:	641c      	str	r4, [r3, #64]	@ 0x40
 800285a:	875c      	strh	r4, [r3, #58]	@ 0x3a
 800285c:	2218      	movs	r2, #24
 800285e:	2113      	movs	r1, #19
 8002860:	300c      	adds	r0, #12
 8002862:	f000 fbf5 	bl	8003050 <core_set_error>
 8002866:	4620      	mov	r0, r4
 8002868:	b009      	add	sp, #36	@ 0x24
 800286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800286e:	9802      	ldr	r0, [sp, #8]
 8002870:	2218      	movs	r2, #24
 8002872:	2111      	movs	r1, #17
 8002874:	300c      	adds	r0, #12
 8002876:	f000 fbeb 	bl	8003050 <core_set_error>
 800287a:	e722      	b.n	80026c2 <ai_platform_api_get_network_report+0xde>
 800287c:	a1c00100 	.word	0xa1c00100
 8002880:	08004228 	.word	0x08004228
 8002884:	a1facade 	.word	0xa1facade
 8002888:	9903      	ldr	r1, [sp, #12]
 800288a:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <ai_platform_api_get_network_report+0x354>)
 800288c:	2200      	movs	r2, #0
 800288e:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 8002892:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 8002896:	4a29      	ldr	r2, [pc, #164]	@ (800293c <ai_platform_api_get_network_report+0x358>)
 8002898:	644a      	str	r2, [r1, #68]	@ 0x44
 800289a:	f10d 0c10 	add.w	ip, sp, #16
 800289e:	f240 4201 	movw	r2, #1025	@ 0x401
 80028a2:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 80028a6:	658a      	str	r2, [r1, #88]	@ 0x58
 80028a8:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 80028ac:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 80028b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b2:	4645      	mov	r5, r8
 80028b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80028b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ba:	464c      	mov	r4, r9
 80028bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028c6:	4630      	mov	r0, r6
 80028c8:	f7ff fc70 	bl	80021ac <ai_buffer_array_sane>
 80028cc:	b998      	cbnz	r0, 80028f6 <ai_platform_api_get_network_report+0x312>
 80028ce:	4638      	mov	r0, r7
 80028d0:	f7ff fc6c 	bl	80021ac <ai_buffer_array_sane>
 80028d4:	b908      	cbnz	r0, 80028da <ai_platform_api_get_network_report+0x2f6>
 80028d6:	2401      	movs	r4, #1
 80028d8:	e6f3      	b.n	80026c2 <ai_platform_api_get_network_report+0xde>
 80028da:	4638      	mov	r0, r7
 80028dc:	f7ff fc66 	bl	80021ac <ai_buffer_array_sane>
 80028e0:	b1b8      	cbz	r0, 8002912 <ai_platform_api_get_network_report+0x32e>
 80028e2:	9b02      	ldr	r3, [sp, #8]
 80028e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80028ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028f0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80028f4:	e7ef      	b.n	80028d6 <ai_platform_api_get_network_report+0x2f2>
 80028f6:	4630      	mov	r0, r6
 80028f8:	f7ff fc58 	bl	80021ac <ai_buffer_array_sane>
 80028fc:	b190      	cbz	r0, 8002924 <ai_platform_api_get_network_report+0x340>
 80028fe:	9b02      	ldr	r3, [sp, #8]
 8002900:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002904:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8002908:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800290c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8002910:	e7dd      	b.n	80028ce <ai_platform_api_get_network_report+0x2ea>
 8002912:	4604      	mov	r4, r0
 8002914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002916:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800291a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800291e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8002922:	deff      	udf	#255	@ 0xff
 8002924:	4604      	mov	r4, r0
 8002926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002928:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800292c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002930:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8002934:	deff      	udf	#255	@ 0xff
 8002936:	bf00      	nop
 8002938:	08003ff8 	.word	0x08003ff8
 800293c:	00040440 	.word	0x00040440

08002940 <ai_platform_network_create>:
 8002940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002944:	b083      	sub	sp, #12
 8002946:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800294a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800294e:	b320      	cbz	r0, 800299a <ai_platform_network_create+0x5a>
 8002950:	6002      	str	r2, [r0, #0]
 8002952:	4616      	mov	r6, r2
 8002954:	461f      	mov	r7, r3
 8002956:	4604      	mov	r4, r0
 8002958:	f000 fb72 	bl	8003040 <core_init>
 800295c:	b970      	cbnz	r0, 800297c <ai_platform_network_create+0x3c>
 800295e:	2530      	movs	r5, #48	@ 0x30
 8002960:	2300      	movs	r3, #0
 8002962:	6023      	str	r3, [r4, #0]
 8002964:	2410      	movs	r4, #16
 8002966:	4642      	mov	r2, r8
 8002968:	4649      	mov	r1, r9
 800296a:	4638      	mov	r0, r7
 800296c:	f001 fa7e 	bl	8003e6c <ai_version_get>
 8002970:	60b0      	str	r0, [r6, #8]
 8002972:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8002976:	b003      	add	sp, #12
 8002978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800297c:	2200      	movs	r2, #0
 800297e:	4649      	mov	r1, r9
 8002980:	4638      	mov	r0, r7
 8002982:	f001 fa73 	bl	8003e6c <ai_version_get>
 8002986:	2200      	movs	r2, #0
 8002988:	4605      	mov	r5, r0
 800298a:	2105      	movs	r1, #5
 800298c:	2001      	movs	r0, #1
 800298e:	f001 fa6d 	bl	8003e6c <ai_version_get>
 8002992:	4285      	cmp	r5, r0
 8002994:	d008      	beq.n	80029a8 <ai_platform_network_create+0x68>
 8002996:	2501      	movs	r5, #1
 8002998:	e7e2      	b.n	8002960 <ai_platform_network_create+0x20>
 800299a:	2510      	movs	r5, #16
 800299c:	462c      	mov	r4, r5
 800299e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80029a2:	b003      	add	sp, #12
 80029a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <ai_platform_network_create+0x80>)
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	a801      	add	r0, sp, #4
 80029ae:	f000 fb5b 	bl	8003068 <ai_check_custom_types>
 80029b2:	b110      	cbz	r0, 80029ba <ai_platform_network_create+0x7a>
 80029b4:	2400      	movs	r4, #0
 80029b6:	4625      	mov	r5, r4
 80029b8:	e7d5      	b.n	8002966 <ai_platform_network_create+0x26>
 80029ba:	2502      	movs	r5, #2
 80029bc:	e7d0      	b.n	8002960 <ai_platform_network_create+0x20>
 80029be:	bf00      	nop
 80029c0:	84048403 	.word	0x84048403

080029c4 <ai_platform_network_init>:
 80029c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c8:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <ai_platform_network_init+0x194>)
 80029ca:	6802      	ldr	r2, [r0, #0]
 80029cc:	4393      	bics	r3, r2
 80029ce:	b083      	sub	sp, #12
 80029d0:	d156      	bne.n	8002a80 <ai_platform_network_init+0xbc>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460f      	mov	r7, r1
 80029d6:	2900      	cmp	r1, #0
 80029d8:	f000 80a9 	beq.w	8002b2e <ai_platform_network_init+0x16a>
 80029dc:	680b      	ldr	r3, [r1, #0]
 80029de:	495f      	ldr	r1, [pc, #380]	@ (8002b5c <ai_platform_network_init+0x198>)
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d113      	bne.n	8002a0c <ai_platform_network_init+0x48>
 80029e4:	495c      	ldr	r1, [pc, #368]	@ (8002b58 <ai_platform_network_init+0x194>)
 80029e6:	89bd      	ldrh	r5, [r7, #12]
 80029e8:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80029ec:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80029f0:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80029f4:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80029f8:	68be      	ldr	r6, [r7, #8]
 80029fa:	428a      	cmp	r2, r1
 80029fc:	d02c      	beq.n	8002a58 <ai_platform_network_init+0x94>
 80029fe:	2303      	movs	r3, #3
 8002a00:	6123      	str	r3, [r4, #16]
 8002a02:	4627      	mov	r7, r4
 8002a04:	4638      	mov	r0, r7
 8002a06:	b003      	add	sp, #12
 8002a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4638      	mov	r0, r7
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8002a16:	f7ff fb95 	bl	8002144 <ai_buffer_get_size>
 8002a1a:	f107 081c 	add.w	r8, r7, #28
 8002a1e:	4605      	mov	r5, r0
 8002a20:	2101      	movs	r1, #1
 8002a22:	4640      	mov	r0, r8
 8002a24:	463e      	mov	r6, r7
 8002a26:	6a3f      	ldr	r7, [r7, #32]
 8002a28:	f7ff fb8c 	bl	8002144 <ai_buffer_get_size>
 8002a2c:	2d00      	cmp	r5, #0
 8002a2e:	9b01      	ldr	r3, [sp, #4]
 8002a30:	bf0a      	itet	eq
 8002a32:	46a9      	moveq	r9, r5
 8002a34:	f04f 0901 	movne.w	r9, #1
 8002a38:	462e      	moveq	r6, r5
 8002a3a:	b330      	cbz	r0, 8002a8a <ai_platform_network_init+0xc6>
 8002a3c:	2f00      	cmp	r7, #0
 8002a3e:	f000 8084 	beq.w	8002b4a <ai_platform_network_init+0x186>
 8002a42:	f04f 0a01 	mov.w	sl, #1
 8002a46:	f1bb 0f00 	cmp.w	fp, #0
 8002a4a:	d021      	beq.n	8002a90 <ai_platform_network_init+0xcc>
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	4941      	ldr	r1, [pc, #260]	@ (8002b58 <ai_platform_network_init+0x194>)
 8002a52:	428a      	cmp	r2, r1
 8002a54:	46ab      	mov	fp, r5
 8002a56:	d1d2      	bne.n	80029fe <ai_platform_network_init+0x3a>
 8002a58:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8002a5a:	454a      	cmp	r2, r9
 8002a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b5c <ai_platform_network_init+0x198>)
 8002a5e:	d221      	bcs.n	8002aa4 <ai_platform_network_init+0xe0>
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d15c      	bne.n	8002b1e <ai_platform_network_init+0x15a>
 8002a64:	6266      	str	r6, [r4, #36]	@ 0x24
 8002a66:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8002a6a:	f8a4 b020 	strh.w	fp, [r4, #32]
 8002a6e:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8002a72:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8002a76:	8525      	strh	r5, [r4, #40]	@ 0x28
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f000 fb1f 	bl	80030bc <ai_layers_init_all>
 8002a7e:	e7be      	b.n	80029fe <ai_platform_network_init+0x3a>
 8002a80:	2700      	movs	r7, #0
 8002a82:	4638      	mov	r0, r7
 8002a84:	b003      	add	sp, #12
 8002a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a8a:	4680      	mov	r8, r0
 8002a8c:	4682      	mov	sl, r0
 8002a8e:	e7da      	b.n	8002a46 <ai_platform_network_init+0x82>
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	d0dc      	beq.n	8002a4e <ai_platform_network_init+0x8a>
 8002a94:	2212      	movs	r2, #18
 8002a96:	2110      	movs	r1, #16
 8002a98:	f104 000c 	add.w	r0, r4, #12
 8002a9c:	f000 fad8 	bl	8003050 <core_set_error>
 8002aa0:	465f      	mov	r7, fp
 8002aa2:	e7af      	b.n	8002a04 <ai_platform_network_init+0x40>
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d0dd      	beq.n	8002a64 <ai_platform_network_init+0xa0>
 8002aa8:	f1b9 0f00 	cmp.w	r9, #0
 8002aac:	d018      	beq.n	8002ae0 <ai_platform_network_init+0x11c>
 8002aae:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ab8:	2700      	movs	r7, #0
 8002aba:	4699      	mov	r9, r3
 8002abc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002abe:	eb06 0e07 	add.w	lr, r6, r7
 8002ac2:	eb03 0c07 	add.w	ip, r3, r7
 8002ac6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002ace:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	45b9      	cmp	r9, r7
 8002ad6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002ada:	d1ef      	bne.n	8002abc <ai_platform_network_init+0xf8>
 8002adc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002ae0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ae2:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8002ae6:	4553      	cmp	r3, sl
 8002ae8:	f8a4 b020 	strh.w	fp, [r4, #32]
 8002aec:	d325      	bcc.n	8002b3a <ai_platform_network_init+0x176>
 8002aee:	f1ba 0f00 	cmp.w	sl, #0
 8002af2:	d0be      	beq.n	8002a72 <ai_platform_network_init+0xae>
 8002af4:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8002af8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002afc:	f04f 0c00 	mov.w	ip, #0
 8002b00:	eb08 070c 	add.w	r7, r8, ip
 8002b04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002b06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b08:	4466      	add	r6, ip
 8002b0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002b0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002b10:	f10c 0c1c 	add.w	ip, ip, #28
 8002b14:	45f4      	cmp	ip, lr
 8002b16:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002b1a:	d1f1      	bne.n	8002b00 <ai_platform_network_init+0x13c>
 8002b1c:	e7a9      	b.n	8002a72 <ai_platform_network_init+0xae>
 8002b1e:	2212      	movs	r2, #18
 8002b20:	2116      	movs	r1, #22
 8002b22:	f104 000c 	add.w	r0, r4, #12
 8002b26:	f000 fa93 	bl	8003050 <core_set_error>
 8002b2a:	2700      	movs	r7, #0
 8002b2c:	e76a      	b.n	8002a04 <ai_platform_network_init+0x40>
 8002b2e:	2211      	movs	r2, #17
 8002b30:	2110      	movs	r1, #16
 8002b32:	300c      	adds	r0, #12
 8002b34:	f000 fa8c 	bl	8003050 <core_set_error>
 8002b38:	e764      	b.n	8002a04 <ai_platform_network_init+0x40>
 8002b3a:	2213      	movs	r2, #19
 8002b3c:	2116      	movs	r1, #22
 8002b3e:	f104 000c 	add.w	r0, r4, #12
 8002b42:	f000 fa85 	bl	8003050 <core_set_error>
 8002b46:	2700      	movs	r7, #0
 8002b48:	e75c      	b.n	8002a04 <ai_platform_network_init+0x40>
 8002b4a:	2213      	movs	r2, #19
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	f104 000c 	add.w	r0, r4, #12
 8002b52:	f000 fa7d 	bl	8003050 <core_set_error>
 8002b56:	e755      	b.n	8002a04 <ai_platform_network_init+0x40>
 8002b58:	a1c00100 	.word	0xa1c00100
 8002b5c:	a1facade 	.word	0xa1facade

08002b60 <ai_platform_network_post_init>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <ai_platform_network_post_init+0x5c>)
 8002b64:	6802      	ldr	r2, [r0, #0]
 8002b66:	ea02 0103 	and.w	r1, r2, r3
 8002b6a:	4393      	bics	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <ai_platform_network_post_init+0x20>
 8002b6e:	6903      	ldr	r3, [r0, #16]
 8002b70:	f013 0502 	ands.w	r5, r3, #2
 8002b74:	4604      	mov	r4, r0
 8002b76:	d005      	beq.n	8002b84 <ai_platform_network_post_init+0x24>
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	d00a      	beq.n	8002b92 <ai_platform_network_post_init+0x32>
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	2000      	movs	r0, #0
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	2210      	movs	r2, #16
 8002b86:	2111      	movs	r1, #17
 8002b88:	300c      	adds	r0, #12
 8002b8a:	f000 fa61 	bl	8003050 <core_set_error>
 8002b8e:	4628      	mov	r0, r5
 8002b90:	bd38      	pop	{r3, r4, r5, pc}
 8002b92:	f000 faa1 	bl	80030d8 <ai_layers_post_init_all>
 8002b96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ef      	beq.n	8002b7c <ai_platform_network_post_init+0x1c>
 8002b9c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8002b9e:	e008      	b.n	8002bb2 <ai_platform_network_post_init+0x52>
 8002ba0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8002ba4:	4798      	blx	r3
 8002ba6:	692b      	ldr	r3, [r5, #16]
 8002ba8:	42ab      	cmp	r3, r5
 8002baa:	d0e7      	beq.n	8002b7c <ai_platform_network_post_init+0x1c>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0e5      	beq.n	8002b7c <ai_platform_network_post_init+0x1c>
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	d1f2      	bne.n	8002ba0 <ai_platform_network_post_init+0x40>
 8002bba:	e7df      	b.n	8002b7c <ai_platform_network_post_init+0x1c>
 8002bbc:	a1c00100 	.word	0xa1c00100

08002bc0 <ai_platform_network_process>:
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	4bb5      	ldr	r3, [pc, #724]	@ (8002e9c <ai_platform_network_process+0x2dc>)
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	6800      	ldr	r0, [r0, #0]
 8002bca:	b085      	sub	sp, #20
 8002bcc:	4383      	bics	r3, r0
 8002bce:	9202      	str	r2, [sp, #8]
 8002bd0:	f040 8140 	bne.w	8002e54 <ai_platform_network_process+0x294>
 8002bd4:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8125 	beq.w	8002e26 <ai_platform_network_process+0x266>
 8002bdc:	692b      	ldr	r3, [r5, #16]
 8002bde:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2700      	movs	r7, #0
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	61af      	str	r7, [r5, #24]
 8002bec:	f040 8137 	bne.w	8002e5e <ai_platform_network_process+0x29e>
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	f000 811e 	beq.w	8002e32 <ai_platform_network_process+0x272>
 8002bf6:	f1ba 0f00 	cmp.w	sl, #0
 8002bfa:	f000 811a 	beq.w	8002e32 <ai_platform_network_process+0x272>
 8002bfe:	f8ba 3000 	ldrh.w	r3, [sl]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8115 	beq.w	8002e32 <ai_platform_network_process+0x272>
 8002c08:	698b      	ldr	r3, [r1, #24]
 8002c0a:	9503      	str	r5, [sp, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	460e      	mov	r6, r1
 8002c12:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d072      	beq.n	8002d00 <ai_platform_network_process+0x140>
 8002c1a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8002c1e:	2c00      	cmp	r4, #0
 8002c20:	d06e      	beq.n	8002d00 <ai_platform_network_process+0x140>
 8002c22:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002c26:	f8d3 9000 	ldr.w	r9, [r3]
 8002c2a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8002c2e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8002c32:	f000 81d3 	beq.w	8002fdc <ai_platform_network_process+0x41c>
 8002c36:	69a3      	ldr	r3, [r4, #24]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	685d      	ldr	r5, [r3, #4]
 8002c3e:	f7ff fa81 	bl	8002144 <ai_buffer_get_size>
 8002c42:	4285      	cmp	r5, r0
 8002c44:	f0c0 8116 	bcc.w	8002e74 <ai_platform_network_process+0x2b4>
 8002c48:	68e0      	ldr	r0, [r4, #12]
 8002c4a:	69b1      	ldr	r1, [r6, #24]
 8002c4c:	68c2      	ldr	r2, [r0, #12]
 8002c4e:	68cb      	ldr	r3, [r1, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 810f 	bne.w	8002e74 <ai_platform_network_process+0x2b4>
 8002c56:	6882      	ldr	r2, [r0, #8]
 8002c58:	688b      	ldr	r3, [r1, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	f040 810a 	bne.w	8002e74 <ai_platform_network_process+0x2b4>
 8002c60:	6842      	ldr	r2, [r0, #4]
 8002c62:	684b      	ldr	r3, [r1, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 8105 	bne.w	8002e74 <ai_platform_network_process+0x2b4>
 8002c6a:	69a3      	ldr	r3, [r4, #24]
 8002c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c70:	f001 f8ea 	bl	8003e48 <ai_array_get_data_byte_size>
 8002c74:	4605      	mov	r5, r0
 8002c76:	4620      	mov	r0, r4
 8002c78:	f001 f910 	bl	8003e9c <get_tensor_byte_size>
 8002c7c:	4285      	cmp	r5, r0
 8002c7e:	f0c0 80f9 	bcc.w	8002e74 <ai_platform_network_process+0x2b4>
 8002c82:	69a3      	ldr	r3, [r4, #24]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f001 f86f 	bl	8003d68 <ai_array_to_buffer_fmt>
 8002c8a:	6833      	ldr	r3, [r6, #0]
 8002c8c:	4058      	eors	r0, r3
 8002c8e:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8002c92:	f040 81a5 	bne.w	8002fe0 <ai_platform_network_process+0x420>
 8002c96:	6873      	ldr	r3, [r6, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 819f 	beq.w	8002fdc <ai_platform_network_process+0x41c>
 8002c9e:	69b3      	ldr	r3, [r6, #24]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 81a5 	beq.w	8002ff2 <ai_platform_network_process+0x432>
 8002ca8:	9a01      	ldr	r2, [sp, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	bf38      	it	cc
 8002cae:	461a      	movcc	r2, r3
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	9201      	str	r2, [sp, #4]
 8002cb4:	f001 f8f2 	bl	8003e9c <get_tensor_byte_size>
 8002cb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8002cbc:	69b3      	ldr	r3, [r6, #24]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fb00 f303 	mul.w	r3, r0, r3
 8002cc4:	f8c8 300c 	str.w	r3, [r8, #12]
 8002cc8:	6871      	ldr	r1, [r6, #4]
 8002cca:	f8c8 1004 	str.w	r1, [r8, #4]
 8002cce:	440b      	add	r3, r1
 8002cd0:	f849 300b 	str.w	r3, [r9, fp]
 8002cd4:	69a0      	ldr	r0, [r4, #24]
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	009a      	lsls	r2, r3, #2
 8002cda:	f107 0701 	add.w	r7, r7, #1
 8002cde:	f106 061c 	add.w	r6, r6, #28
 8002ce2:	f100 80b1 	bmi.w	8002e48 <ai_platform_network_process+0x288>
 8002ce6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	4419      	add	r1, r3
 8002cee:	6081      	str	r1, [r0, #8]
 8002cf0:	69a3      	ldr	r3, [r4, #24]
 8002cf2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	f8ba 3000 	ldrh.w	r3, [sl]
 8002cfc:	42bb      	cmp	r3, r7
 8002cfe:	d888      	bhi.n	8002c12 <ai_platform_network_process+0x52>
 8002d00:	9d03      	ldr	r5, [sp, #12]
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 817c 	beq.w	8003004 <ai_platform_network_process+0x444>
 8002d0c:	2a01      	cmp	r2, #1
 8002d0e:	f240 80bd 	bls.w	8002e8c <ai_platform_network_process+0x2cc>
 8002d12:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8002d16:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80b6 	beq.w	8002e8c <ai_platform_network_process+0x2cc>
 8002d20:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002d24:	2700      	movs	r7, #0
 8002d26:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80bd 	beq.w	8002eaa <ai_platform_network_process+0x2ea>
 8002d30:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8002d34:	2e00      	cmp	r6, #0
 8002d36:	f000 80b8 	beq.w	8002eaa <ai_platform_network_process+0x2ea>
 8002d3a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002d3e:	681c      	ldr	r4, [r3, #0]
 8002d40:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8002d44:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8002d48:	f000 8160 	beq.w	800300c <ai_platform_network_process+0x44c>
 8002d4c:	69b3      	ldr	r3, [r6, #24]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	4658      	mov	r0, fp
 8002d56:	f7ff f9f5 	bl	8002144 <ai_buffer_get_size>
 8002d5a:	9b02      	ldr	r3, [sp, #8]
 8002d5c:	4283      	cmp	r3, r0
 8002d5e:	f0c0 8095 	bcc.w	8002e8c <ai_platform_network_process+0x2cc>
 8002d62:	68f0      	ldr	r0, [r6, #12]
 8002d64:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002d68:	68c2      	ldr	r2, [r0, #12]
 8002d6a:	68cb      	ldr	r3, [r1, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 808d 	bne.w	8002e8c <ai_platform_network_process+0x2cc>
 8002d72:	6882      	ldr	r2, [r0, #8]
 8002d74:	688b      	ldr	r3, [r1, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f040 8088 	bne.w	8002e8c <ai_platform_network_process+0x2cc>
 8002d7c:	6842      	ldr	r2, [r0, #4]
 8002d7e:	684b      	ldr	r3, [r1, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 8083 	bne.w	8002e8c <ai_platform_network_process+0x2cc>
 8002d86:	69b3      	ldr	r3, [r6, #24]
 8002d88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d8c:	f001 f85c 	bl	8003e48 <ai_array_get_data_byte_size>
 8002d90:	9002      	str	r0, [sp, #8]
 8002d92:	4630      	mov	r0, r6
 8002d94:	f001 f882 	bl	8003e9c <get_tensor_byte_size>
 8002d98:	9b02      	ldr	r3, [sp, #8]
 8002d9a:	4283      	cmp	r3, r0
 8002d9c:	d376      	bcc.n	8002e8c <ai_platform_network_process+0x2cc>
 8002d9e:	69b3      	ldr	r3, [r6, #24]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	f000 ffe1 	bl	8003d68 <ai_array_to_buffer_fmt>
 8002da6:	f8db 3000 	ldr.w	r3, [fp]
 8002daa:	4058      	eors	r0, r3
 8002dac:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8002db0:	f040 8134 	bne.w	800301c <ai_platform_network_process+0x45c>
 8002db4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8127 	beq.w	800300c <ai_platform_network_process+0x44c>
 8002dbe:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8133 	beq.w	8003030 <ai_platform_network_process+0x470>
 8002dca:	9a01      	ldr	r2, [sp, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	bf38      	it	cc
 8002dd0:	461a      	movcc	r2, r3
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	9201      	str	r2, [sp, #4]
 8002dd6:	f001 f861 	bl	8003e9c <get_tensor_byte_size>
 8002dda:	f8c9 0008 	str.w	r0, [r9, #8]
 8002dde:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fb00 f303 	mul.w	r3, r0, r3
 8002de8:	f8c9 300c 	str.w	r3, [r9, #12]
 8002dec:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002df0:	f8c9 1004 	str.w	r1, [r9, #4]
 8002df4:	440b      	add	r3, r1
 8002df6:	f844 300a 	str.w	r3, [r4, sl]
 8002dfa:	69b0      	ldr	r0, [r6, #24]
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f107 0701 	add.w	r7, r7, #1
 8002e04:	f10b 0b1c 	add.w	fp, fp, #28
 8002e08:	d44a      	bmi.n	8002ea0 <ai_platform_network_process+0x2e0>
 8002e0a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	4419      	add	r1, r3
 8002e12:	6081      	str	r1, [r0, #8]
 8002e14:	69b3      	ldr	r3, [r6, #24]
 8002e16:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002e20:	42bb      	cmp	r3, r7
 8002e22:	d880      	bhi.n	8002d26 <ai_platform_network_process+0x166>
 8002e24:	e041      	b.n	8002eaa <ai_platform_network_process+0x2ea>
 8002e26:	692a      	ldr	r2, [r5, #16]
 8002e28:	61ab      	str	r3, [r5, #24]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	2a03      	cmp	r2, #3
 8002e30:	d115      	bne.n	8002e5e <ai_platform_network_process+0x29e>
 8002e32:	2217      	movs	r2, #23
 8002e34:	2112      	movs	r1, #18
 8002e36:	f105 000c 	add.w	r0, r5, #12
 8002e3a:	f000 f909 	bl	8003050 <core_set_error>
 8002e3e:	2400      	movs	r4, #0
 8002e40:	4620      	mov	r0, r4
 8002e42:	b005      	add	sp, #20
 8002e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e48:	f8ba 3000 	ldrh.w	r3, [sl]
 8002e4c:	429f      	cmp	r7, r3
 8002e4e:	f4ff aee0 	bcc.w	8002c12 <ai_platform_network_process+0x52>
 8002e52:	e755      	b.n	8002d00 <ai_platform_network_process+0x140>
 8002e54:	2400      	movs	r4, #0
 8002e56:	4620      	mov	r0, r4
 8002e58:	b005      	add	sp, #20
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5e:	2230      	movs	r2, #48	@ 0x30
 8002e60:	2111      	movs	r1, #17
 8002e62:	f105 000c 	add.w	r0, r5, #12
 8002e66:	f000 f8f3 	bl	8003050 <core_set_error>
 8002e6a:	2400      	movs	r4, #0
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	b005      	add	sp, #20
 8002e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e74:	9d03      	ldr	r5, [sp, #12]
 8002e76:	2218      	movs	r2, #24
 8002e78:	2112      	movs	r1, #18
 8002e7a:	f105 000c 	add.w	r0, r5, #12
 8002e7e:	f000 f8e7 	bl	8003050 <core_set_error>
 8002e82:	2400      	movs	r4, #0
 8002e84:	4620      	mov	r0, r4
 8002e86:	b005      	add	sp, #20
 8002e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8c:	2218      	movs	r2, #24
 8002e8e:	2113      	movs	r1, #19
 8002e90:	f105 000c 	add.w	r0, r5, #12
 8002e94:	f000 f8dc 	bl	8003050 <core_set_error>
 8002e98:	2400      	movs	r4, #0
 8002e9a:	e7d1      	b.n	8002e40 <ai_platform_network_process+0x280>
 8002e9c:	a1c00100 	.word	0xa1c00100
 8002ea0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002ea4:	429f      	cmp	r7, r3
 8002ea6:	f4ff af3e 	bcc.w	8002d26 <ai_platform_network_process+0x166>
 8002eaa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002eae:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8002eb0:	832b      	strh	r3, [r5, #24]
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	f040 808c 	bne.w	8002fd0 <ai_platform_network_process+0x410>
 8002eb8:	4616      	mov	r6, r2
 8002eba:	4617      	mov	r7, r2
 8002ebc:	8b6c      	ldrh	r4, [r5, #26]
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	bf38      	it	cc
 8002ec2:	46ab      	movcc	fp, r5
 8002ec4:	d2bc      	bcs.n	8002e40 <ai_platform_network_process+0x280>
 8002ec6:	2e00      	cmp	r6, #0
 8002ec8:	d030      	beq.n	8002f2c <ai_platform_network_process+0x36c>
 8002eca:	f04f 0800 	mov.w	r8, #0
 8002ece:	e014      	b.n	8002efa <ai_platform_network_process+0x33a>
 8002ed0:	6882      	ldr	r2, [r0, #8]
 8002ed2:	68c5      	ldr	r5, [r0, #12]
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	1b52      	subs	r2, r2, r5
 8002ed8:	4413      	add	r3, r2
 8002eda:	6083      	str	r3, [r0, #8]
 8002edc:	698b      	ldr	r3, [r1, #24]
 8002ede:	6862      	ldr	r2, [r4, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8002ee6:	f859 200a 	ldr.w	r2, [r9, sl]
 8002eea:	440b      	add	r3, r1
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf24      	itt	cs
 8002ef0:	68e3      	ldrcs	r3, [r4, #12]
 8002ef2:	1ad3      	subcs	r3, r2, r3
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	f108 0801 	add.w	r8, r8, #1
 8002efa:	8833      	ldrh	r3, [r6, #0]
 8002efc:	4543      	cmp	r3, r8
 8002efe:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8002f02:	d913      	bls.n	8002f2c <ai_platform_network_process+0x36c>
 8002f04:	6873      	ldr	r3, [r6, #4]
 8002f06:	b18b      	cbz	r3, 8002f2c <ai_platform_network_process+0x36c>
 8002f08:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8002f0c:	b171      	cbz	r1, 8002f2c <ai_platform_network_process+0x36c>
 8002f0e:	6988      	ldr	r0, [r1, #24]
 8002f10:	68b2      	ldr	r2, [r6, #8]
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	f8d2 9000 	ldr.w	r9, [r2]
 8002f18:	009d      	lsls	r5, r3, #2
 8002f1a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8002f1e:	d5d7      	bpl.n	8002ed0 <ai_platform_network_process+0x310>
 8002f20:	6881      	ldr	r1, [r0, #8]
 8002f22:	68a2      	ldr	r2, [r4, #8]
 8002f24:	6860      	ldr	r0, [r4, #4]
 8002f26:	f000 fe7d 	bl	8003c24 <st_int8_copy>
 8002f2a:	e7da      	b.n	8002ee2 <ai_platform_network_process+0x322>
 8002f2c:	4658      	mov	r0, fp
 8002f2e:	f000 f8e7 	bl	8003100 <ai_layers_forward_all>
 8002f32:	2f00      	cmp	r7, #0
 8002f34:	d03d      	beq.n	8002fb2 <ai_platform_network_process+0x3f2>
 8002f36:	2400      	movs	r4, #0
 8002f38:	e016      	b.n	8002f68 <ai_platform_network_process+0x3a8>
 8002f3a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8002f3e:	f859 100a 	ldr.w	r1, [r9, sl]
 8002f42:	4413      	add	r3, r2
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf24      	itt	cs
 8002f48:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8002f4c:	1acb      	subcs	r3, r1, r3
 8002f4e:	f8c8 3004 	str.w	r3, [r8, #4]
 8002f52:	6981      	ldr	r1, [r0, #24]
 8002f54:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8002f58:	1b52      	subs	r2, r2, r5
 8002f5a:	4413      	add	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
 8002f5e:	6983      	ldr	r3, [r0, #24]
 8002f60:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	3401      	adds	r4, #1
 8002f68:	883b      	ldrh	r3, [r7, #0]
 8002f6a:	42a3      	cmp	r3, r4
 8002f6c:	d921      	bls.n	8002fb2 <ai_platform_network_process+0x3f2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	b1fb      	cbz	r3, 8002fb2 <ai_platform_network_process+0x3f2>
 8002f72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002f76:	b1e0      	cbz	r0, 8002fb2 <ai_platform_network_process+0x3f2>
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	6983      	ldr	r3, [r0, #24]
 8002f7c:	f8d2 9000 	ldr.w	r9, [r2]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8002f88:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8002f8c:	d5d5      	bpl.n	8002f3a <ai_platform_network_process+0x37a>
 8002f8e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8002f92:	6898      	ldr	r0, [r3, #8]
 8002f94:	f000 fe46 	bl	8003c24 <st_int8_copy>
 8002f98:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8002f9c:	f859 200a 	ldr.w	r2, [r9, sl]
 8002fa0:	440b      	add	r3, r1
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	bf24      	itt	cs
 8002fa6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8002faa:	1ad3      	subcs	r3, r2, r3
 8002fac:	f8c8 3004 	str.w	r3, [r8, #4]
 8002fb0:	e7d9      	b.n	8002f66 <ai_platform_network_process+0x3a6>
 8002fb2:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8002fb6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8002fba:	3401      	adds	r4, #1
 8002fbc:	b2a4      	uxth	r4, r4
 8002fbe:	42a3      	cmp	r3, r4
 8002fc0:	f8ab 401a 	strh.w	r4, [fp, #26]
 8002fc4:	f63f af7f 	bhi.w	8002ec6 <ai_platform_network_process+0x306>
 8002fc8:	4620      	mov	r0, r4
 8002fca:	b005      	add	sp, #20
 8002fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd0:	2a01      	cmp	r2, #1
 8002fd2:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8002fd4:	d02a      	beq.n	800302c <ai_platform_network_process+0x46c>
 8002fd6:	f106 070c 	add.w	r7, r6, #12
 8002fda:	e76f      	b.n	8002ebc <ai_platform_network_process+0x2fc>
 8002fdc:	9d03      	ldr	r5, [sp, #12]
 8002fde:	e728      	b.n	8002e32 <ai_platform_network_process+0x272>
 8002fe0:	9d03      	ldr	r5, [sp, #12]
 8002fe2:	2219      	movs	r2, #25
 8002fe4:	2112      	movs	r1, #18
 8002fe6:	f105 000c 	add.w	r0, r5, #12
 8002fea:	f000 f831 	bl	8003050 <core_set_error>
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e726      	b.n	8002e40 <ai_platform_network_process+0x280>
 8002ff2:	9d03      	ldr	r5, [sp, #12]
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	2221      	movs	r2, #33	@ 0x21
 8002ff8:	2112      	movs	r1, #18
 8002ffa:	f105 000c 	add.w	r0, r5, #12
 8002ffe:	f000 f827 	bl	8003050 <core_set_error>
 8003002:	e71d      	b.n	8002e40 <ai_platform_network_process+0x280>
 8003004:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003008:	832b      	strh	r3, [r5, #24]
 800300a:	e752      	b.n	8002eb2 <ai_platform_network_process+0x2f2>
 800300c:	2217      	movs	r2, #23
 800300e:	2113      	movs	r1, #19
 8003010:	f105 000c 	add.w	r0, r5, #12
 8003014:	f000 f81c 	bl	8003050 <core_set_error>
 8003018:	2400      	movs	r4, #0
 800301a:	e711      	b.n	8002e40 <ai_platform_network_process+0x280>
 800301c:	2219      	movs	r2, #25
 800301e:	2113      	movs	r1, #19
 8003020:	f105 000c 	add.w	r0, r5, #12
 8003024:	f000 f814 	bl	8003050 <core_set_error>
 8003028:	2400      	movs	r4, #0
 800302a:	e709      	b.n	8002e40 <ai_platform_network_process+0x280>
 800302c:	2700      	movs	r7, #0
 800302e:	e745      	b.n	8002ebc <ai_platform_network_process+0x2fc>
 8003030:	4604      	mov	r4, r0
 8003032:	2221      	movs	r2, #33	@ 0x21
 8003034:	2113      	movs	r1, #19
 8003036:	f105 000c 	add.w	r0, r5, #12
 800303a:	f000 f809 	bl	8003050 <core_set_error>
 800303e:	e6ff      	b.n	8002e40 <ai_platform_network_process+0x280>

08003040 <core_init>:
 8003040:	2001      	movs	r0, #1
 8003042:	4770      	bx	lr

08003044 <core_get_error>:
 8003044:	4603      	mov	r3, r0
 8003046:	2200      	movs	r2, #0
 8003048:	6800      	ldr	r0, [r0, #0]
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <core_set_error>:
 8003050:	4603      	mov	r3, r0
 8003052:	7800      	ldrb	r0, [r0, #0]
 8003054:	b108      	cbz	r0, 800305a <core_set_error+0xa>
 8003056:	2000      	movs	r0, #0
 8003058:	4770      	bx	lr
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	f362 211f 	bfi	r1, r2, #8, #24
 8003062:	2001      	movs	r0, #1
 8003064:	6019      	str	r1, [r3, #0]
 8003066:	4770      	bx	lr

08003068 <ai_check_custom_types>:
 8003068:	b082      	sub	sp, #8
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <ai_check_custom_types+0x50>)
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	b118      	cbz	r0, 8003078 <ai_check_custom_types+0x10>
 8003070:	7803      	ldrb	r3, [r0, #0]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d002      	beq.n	800307c <ai_check_custom_types+0x14>
 8003076:	2000      	movs	r0, #0
 8003078:	b002      	add	sp, #8
 800307a:	4770      	bx	lr
 800307c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <ai_check_custom_types+0x26>
 8003084:	2001      	movs	r0, #1
 8003086:	f080 0001 	eor.w	r0, r0, #1
 800308a:	b002      	add	sp, #8
 800308c:	4770      	bx	lr
 800308e:	7842      	ldrb	r2, [r0, #1]
 8003090:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003094:	429a      	cmp	r2, r3
 8003096:	f100 0001 	add.w	r0, r0, #1
 800309a:	d1f3      	bne.n	8003084 <ai_check_custom_types+0x1c>
 800309c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80030a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1ed      	bne.n	8003084 <ai_check_custom_types+0x1c>
 80030a8:	7842      	ldrb	r2, [r0, #1]
 80030aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1e8      	bne.n	8003084 <ai_check_custom_types+0x1c>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e7e7      	b.n	8003086 <ai_check_custom_types+0x1e>
 80030b6:	bf00      	nop
 80030b8:	84048403 	.word	0x84048403

080030bc <ai_layers_init_all>:
 80030bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80030be:	2100      	movs	r1, #0
 80030c0:	b143      	cbz	r3, 80030d4 <ai_layers_init_all+0x18>
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	60d8      	str	r0, [r3, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	f101 0101 	add.w	r1, r1, #1
 80030cc:	d002      	beq.n	80030d4 <ai_layers_init_all+0x18>
 80030ce:	b10a      	cbz	r2, 80030d4 <ai_layers_init_all+0x18>
 80030d0:	4613      	mov	r3, r2
 80030d2:	e7f5      	b.n	80030c0 <ai_layers_init_all+0x4>
 80030d4:	4608      	mov	r0, r1
 80030d6:	4770      	bx	lr

080030d8 <ai_layers_post_init_all>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80030dc:	2500      	movs	r5, #0
 80030de:	b16c      	cbz	r4, 80030fc <ai_layers_post_init_all+0x24>
 80030e0:	6863      	ldr	r3, [r4, #4]
 80030e2:	07db      	lsls	r3, r3, #31
 80030e4:	d504      	bpl.n	80030f0 <ai_layers_post_init_all+0x18>
 80030e6:	6a23      	ldr	r3, [r4, #32]
 80030e8:	4620      	mov	r0, r4
 80030ea:	b10b      	cbz	r3, 80030f0 <ai_layers_post_init_all+0x18>
 80030ec:	4798      	blx	r3
 80030ee:	3501      	adds	r5, #1
 80030f0:	6923      	ldr	r3, [r4, #16]
 80030f2:	42a3      	cmp	r3, r4
 80030f4:	d002      	beq.n	80030fc <ai_layers_post_init_all+0x24>
 80030f6:	b10b      	cbz	r3, 80030fc <ai_layers_post_init_all+0x24>
 80030f8:	461c      	mov	r4, r3
 80030fa:	e7f0      	b.n	80030de <ai_layers_post_init_all+0x6>
 80030fc:	4628      	mov	r0, r5
 80030fe:	bd38      	pop	{r3, r4, r5, pc}

08003100 <ai_layers_forward_all>:
 8003100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003104:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8003108:	4604      	mov	r4, r0
 800310a:	f1b8 0f00 	cmp.w	r8, #0
 800310e:	d02b      	beq.n	8003168 <ai_layers_forward_all+0x68>
 8003110:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003112:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8003114:	b321      	cbz	r1, 8003160 <ai_layers_forward_all+0x60>
 8003116:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003118:	2001      	movs	r0, #1
 800311a:	47c0      	blx	r8
 800311c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800311e:	b1fe      	cbz	r6, 8003160 <ai_layers_forward_all+0x60>
 8003120:	2700      	movs	r7, #0
 8003122:	4631      	mov	r1, r6
 8003124:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003126:	2002      	movs	r0, #2
 8003128:	47c0      	blx	r8
 800312a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800312c:	4628      	mov	r0, r5
 800312e:	696b      	ldr	r3, [r5, #20]
 8003130:	4798      	blx	r3
 8003132:	692e      	ldr	r6, [r5, #16]
 8003134:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003136:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003138:	42b5      	cmp	r5, r6
 800313a:	f04f 0003 	mov.w	r0, #3
 800313e:	d007      	beq.n	8003150 <ai_layers_forward_all+0x50>
 8003140:	47c0      	blx	r8
 8003142:	3701      	adds	r7, #1
 8003144:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8003146:	2e00      	cmp	r6, #0
 8003148:	d1eb      	bne.n	8003122 <ai_layers_forward_all+0x22>
 800314a:	4638      	mov	r0, r7
 800314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003150:	2003      	movs	r0, #3
 8003152:	47c0      	blx	r8
 8003154:	2300      	movs	r3, #0
 8003156:	3701      	adds	r7, #1
 8003158:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800315a:	4638      	mov	r0, r7
 800315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003160:	2700      	movs	r7, #0
 8003162:	4638      	mov	r0, r7
 8003164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003168:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800316a:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800316c:	2d00      	cmp	r5, #0
 800316e:	d0f7      	beq.n	8003160 <ai_layers_forward_all+0x60>
 8003170:	4647      	mov	r7, r8
 8003172:	696b      	ldr	r3, [r5, #20]
 8003174:	4628      	mov	r0, r5
 8003176:	4798      	blx	r3
 8003178:	462b      	mov	r3, r5
 800317a:	692d      	ldr	r5, [r5, #16]
 800317c:	429d      	cmp	r5, r3
 800317e:	d004      	beq.n	800318a <ai_layers_forward_all+0x8a>
 8003180:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003182:	3701      	adds	r7, #1
 8003184:	2d00      	cmp	r5, #0
 8003186:	d1f4      	bne.n	8003172 <ai_layers_forward_all+0x72>
 8003188:	e7df      	b.n	800314a <ai_layers_forward_all+0x4a>
 800318a:	2300      	movs	r3, #0
 800318c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800318e:	3701      	adds	r7, #1
 8003190:	e7db      	b.n	800314a <ai_layers_forward_all+0x4a>
 8003192:	bf00      	nop

08003194 <forward_dense>:
 8003194:	6982      	ldr	r2, [r0, #24]
 8003196:	8813      	ldrh	r3, [r2, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d043      	beq.n	8003224 <forward_dense+0x90>
 800319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	6855      	ldr	r5, [r2, #4]
 80031a2:	6869      	ldr	r1, [r5, #4]
 80031a4:	b08e      	sub	sp, #56	@ 0x38
 80031a6:	b101      	cbz	r1, 80031aa <forward_dense+0x16>
 80031a8:	6809      	ldr	r1, [r1, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d069      	beq.n	8003282 <forward_dense+0xee>
 80031ae:	692a      	ldr	r2, [r5, #16]
 80031b0:	b102      	cbz	r2, 80031b4 <forward_dense+0x20>
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d061      	beq.n	800327c <forward_dense+0xe8>
 80031b8:	69ec      	ldr	r4, [r5, #28]
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	d057      	beq.n	800326e <forward_dense+0xda>
 80031be:	8b2e      	ldrh	r6, [r5, #24]
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	2e01      	cmp	r6, #1
 80031c4:	d955      	bls.n	8003272 <forward_dense+0xde>
 80031c6:	6864      	ldr	r4, [r4, #4]
 80031c8:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80031cc:	68cf      	ldr	r7, [r1, #12]
 80031ce:	68d0      	ldr	r0, [r2, #12]
 80031d0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80031d4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80031d8:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 80031dc:	f8d9 0000 	ldr.w	r0, [r9]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	fb06 f807 	mul.w	r8, r6, r7
 80031e6:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 80031ea:	d044      	beq.n	8003276 <forward_dense+0xe2>
 80031ec:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 80031ee:	b11d      	cbz	r5, 80031f8 <forward_dense+0x64>
 80031f0:	682d      	ldr	r5, [r5, #0]
 80031f2:	b10d      	cbz	r5, 80031f8 <forward_dense+0x64>
 80031f4:	69ab      	ldr	r3, [r5, #24]
 80031f6:	689d      	ldr	r5, [r3, #8]
 80031f8:	6992      	ldr	r2, [r2, #24]
 80031fa:	698b      	ldr	r3, [r1, #24]
 80031fc:	6890      	ldr	r0, [r2, #8]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	b10c      	cbz	r4, 8003206 <forward_dense+0x72>
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	689c      	ldr	r4, [r3, #8]
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <forward_dense+0xf4>)
 8003208:	459c      	cmp	ip, r3
 800320a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800320e:	d023      	beq.n	8003258 <forward_dense+0xc4>
 8003210:	4e1e      	ldr	r6, [pc, #120]	@ (800328c <forward_dense+0xf8>)
 8003212:	45b4      	cmp	ip, r6
 8003214:	d015      	beq.n	8003242 <forward_dense+0xae>
 8003216:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800321a:	459c      	cmp	ip, r3
 800321c:	d004      	beq.n	8003228 <forward_dense+0x94>
 800321e:	b00e      	add	sp, #56	@ 0x38
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	deff      	udf	#255	@ 0xff
 8003228:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800322c:	a807      	add	r0, sp, #28
 800322e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8003232:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8003236:	9209      	str	r2, [sp, #36]	@ 0x24
 8003238:	f000 f944 	bl	80034c4 <forward_lite_dense_if32of32wf32>
 800323c:	b00e      	add	sp, #56	@ 0x38
 800323e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003242:	e9cd e803 	strd	lr, r8, [sp, #12]
 8003246:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800324a:	9500      	str	r5, [sp, #0]
 800324c:	464b      	mov	r3, r9
 800324e:	f000 fa93 	bl	8003778 <forward_lite_dense_if32of32wf32_lut4>
 8003252:	b00e      	add	sp, #56	@ 0x38
 8003254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003258:	e9cd e803 	strd	lr, r8, [sp, #12]
 800325c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003260:	9500      	str	r5, [sp, #0]
 8003262:	464b      	mov	r3, r9
 8003264:	f000 fbb0 	bl	80039c8 <forward_lite_dense_if32of32wf32_lut8>
 8003268:	b00e      	add	sp, #56	@ 0x38
 800326a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800326e:	4620      	mov	r0, r4
 8003270:	e7aa      	b.n	80031c8 <forward_dense+0x34>
 8003272:	2400      	movs	r4, #0
 8003274:	e7a8      	b.n	80031c8 <forward_dense+0x34>
 8003276:	2300      	movs	r3, #0
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	deff      	udf	#255	@ 0xff
 800327c:	2300      	movs	r3, #0
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	deff      	udf	#255	@ 0xff
 8003282:	2300      	movs	r3, #0
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	deff      	udf	#255	@ 0xff
 8003288:	00d01040 	.word	0x00d01040
 800328c:	00f01040 	.word	0x00f01040

08003290 <forward_relu>:
 8003290:	6982      	ldr	r2, [r0, #24]
 8003292:	8813      	ldrh	r3, [r2, #0]
 8003294:	b323      	cbz	r3, 80032e0 <forward_relu+0x50>
 8003296:	6851      	ldr	r1, [r2, #4]
 8003298:	684a      	ldr	r2, [r1, #4]
 800329a:	b102      	cbz	r2, 800329e <forward_relu+0xe>
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	f000 808d 	beq.w	80033be <forward_relu+0x12e>
 80032a4:	b470      	push	{r4, r5, r6}
 80032a6:	6909      	ldr	r1, [r1, #16]
 80032a8:	b101      	cbz	r1, 80032ac <forward_relu+0x1c>
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	69c6      	ldr	r6, [r0, #28]
 80032ae:	b1ce      	cbz	r6, 80032e4 <forward_relu+0x54>
 80032b0:	6873      	ldr	r3, [r6, #4]
 80032b2:	6988      	ldr	r0, [r1, #24]
 80032b4:	6991      	ldr	r1, [r2, #24]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d044      	beq.n	8003344 <forward_relu+0xb4>
 80032ba:	6893      	ldr	r3, [r2, #8]
 80032bc:	6880      	ldr	r0, [r0, #8]
 80032be:	6889      	ldr	r1, [r1, #8]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	d073      	beq.n	80033ac <forward_relu+0x11c>
 80032c4:	68d5      	ldr	r5, [r2, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80032cc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80032d0:	429d      	cmp	r5, r3
 80032d2:	fb04 f202 	mul.w	r2, r4, r2
 80032d6:	d1f9      	bne.n	80032cc <forward_relu+0x3c>
 80032d8:	68b3      	ldr	r3, [r6, #8]
 80032da:	bc70      	pop	{r4, r5, r6}
 80032dc:	f000 b874 	b.w	80033c8 <forward_lite_nl_relu_generic_if32of32_kernel>
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	deff      	udf	#255	@ 0xff
 80032e4:	6893      	ldr	r3, [r2, #8]
 80032e6:	6989      	ldr	r1, [r1, #24]
 80032e8:	6990      	ldr	r0, [r2, #24]
 80032ea:	6889      	ldr	r1, [r1, #8]
 80032ec:	6884      	ldr	r4, [r0, #8]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	d05e      	beq.n	80033b0 <forward_relu+0x120>
 80032f2:	68d5      	ldr	r5, [r2, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80032fa:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80032fe:	429d      	cmp	r5, r3
 8003300:	fb00 f202 	mul.w	r2, r0, r2
 8003304:	d1f9      	bne.n	80032fa <forward_relu+0x6a>
 8003306:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800330a:	3b01      	subs	r3, #1
 800330c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8003310:	4294      	cmp	r4, r2
 8003312:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003316:	d813      	bhi.n	8003340 <forward_relu+0xb0>
 8003318:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80033c4 <forward_relu+0x134>
 800331c:	3204      	adds	r2, #4
 800331e:	3104      	adds	r1, #4
 8003320:	4613      	mov	r3, r2
 8003322:	ed72 7a01 	vldmdb	r2!, {s15}
 8003326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	f1a3 0308 	sub.w	r3, r3, #8
 8003332:	bfb8      	it	lt
 8003334:	eef0 7a47 	vmovlt.f32	s15, s14
 8003338:	429c      	cmp	r4, r3
 800333a:	ed61 7a01 	vstmdb	r1!, {s15}
 800333e:	d9ef      	bls.n	8003320 <forward_relu+0x90>
 8003340:	bc70      	pop	{r4, r5, r6}
 8003342:	4770      	bx	lr
 8003344:	688c      	ldr	r4, [r1, #8]
 8003346:	6891      	ldr	r1, [r2, #8]
 8003348:	6880      	ldr	r0, [r0, #8]
 800334a:	0a09      	lsrs	r1, r1, #8
 800334c:	d032      	beq.n	80033b4 <forward_relu+0x124>
 800334e:	68d5      	ldr	r5, [r2, #12]
 8003350:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8003354:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003358:	4295      	cmp	r5, r2
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	d1f9      	bne.n	8003354 <forward_relu+0xc4>
 8003360:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003364:	3a01      	subs	r2, #1
 8003366:	68b1      	ldr	r1, [r6, #8]
 8003368:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800336c:	429c      	cmp	r4, r3
 800336e:	ed91 7a00 	vldr	s14, [r1]
 8003372:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003376:	d8e3      	bhi.n	8003340 <forward_relu+0xb0>
 8003378:	2500      	movs	r5, #0
 800337a:	3304      	adds	r3, #4
 800337c:	1d02      	adds	r2, r0, #4
 800337e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	f1a3 0104 	sub.w	r1, r3, #4
 800338e:	f1a3 0308 	sub.w	r3, r3, #8
 8003392:	d405      	bmi.n	80033a0 <forward_relu+0x110>
 8003394:	429c      	cmp	r4, r3
 8003396:	f842 5d04 	str.w	r5, [r2, #-4]!
 800339a:	d8d1      	bhi.n	8003340 <forward_relu+0xb0>
 800339c:	460b      	mov	r3, r1
 800339e:	e7ee      	b.n	800337e <forward_relu+0xee>
 80033a0:	429c      	cmp	r4, r3
 80033a2:	ed62 7a01 	vstmdb	r2!, {s15}
 80033a6:	d8cb      	bhi.n	8003340 <forward_relu+0xb0>
 80033a8:	460b      	mov	r3, r1
 80033aa:	e7e8      	b.n	800337e <forward_relu+0xee>
 80033ac:	2201      	movs	r2, #1
 80033ae:	e793      	b.n	80032d8 <forward_relu+0x48>
 80033b0:	4622      	mov	r2, r4
 80033b2:	e7b1      	b.n	8003318 <forward_relu+0x88>
 80033b4:	68b2      	ldr	r2, [r6, #8]
 80033b6:	4623      	mov	r3, r4
 80033b8:	ed92 7a00 	vldr	s14, [r2]
 80033bc:	e7dc      	b.n	8003378 <forward_relu+0xe8>
 80033be:	2300      	movs	r3, #0
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	deff      	udf	#255	@ 0xff
 80033c4:	00000000 	.word	0x00000000

080033c8 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80033c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80033cc:	ed93 7a00 	vldr	s14, [r3]
 80033d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80033d4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d42a      	bmi.n	8003434 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80033de:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80033e2:	3a01      	subs	r2, #1
 80033e4:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80033e8:	4561      	cmp	r1, ip
 80033ea:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80033ee:	d85d      	bhi.n	80034ac <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80033f0:	1d11      	adds	r1, r2, #4
 80033f2:	f10c 0304 	add.w	r3, ip, #4
 80033f6:	4408      	add	r0, r1
 80033f8:	ebac 0202 	sub.w	r2, ip, r2
 80033fc:	e00c      	b.n	8003418 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80033fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800340a:	db01      	blt.n	8003410 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800340c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8003410:	4293      	cmp	r3, r2
 8003412:	ed60 7a01 	vstmdb	r0!, {s15}
 8003416:	d00c      	beq.n	8003432 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8003418:	ed73 7a01 	vldmdb	r3!, {s15}
 800341c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	daeb      	bge.n	80033fe <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8003426:	eef0 7a66 	vmov.f32	s15, s13
 800342a:	4293      	cmp	r3, r2
 800342c:	ed60 7a01 	vstmdb	r0!, {s15}
 8003430:	d1f2      	bne.n	8003418 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8003432:	4770      	bx	lr
 8003434:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8003438:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800343c:	3a01      	subs	r2, #1
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003446:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800344a:	d017      	beq.n	800347c <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800344c:	4561      	cmp	r1, ip
 800344e:	d82d      	bhi.n	80034ac <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8003450:	1d11      	adds	r1, r2, #4
 8003452:	f10c 0304 	add.w	r3, ip, #4
 8003456:	4401      	add	r1, r0
 8003458:	ebac 0202 	sub.w	r2, ip, r2
 800345c:	ed73 7a01 	vldmdb	r3!, {s15}
 8003460:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003470:	d81d      	bhi.n	80034ae <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8003472:	4293      	cmp	r3, r2
 8003474:	ed61 6a01 	vstmdb	r1!, {s13}
 8003478:	d1f0      	bne.n	800345c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800347a:	4770      	bx	lr
 800347c:	4561      	cmp	r1, ip
 800347e:	d815      	bhi.n	80034ac <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8003480:	1d11      	adds	r1, r2, #4
 8003482:	b500      	push	{lr}
 8003484:	f10c 0304 	add.w	r3, ip, #4
 8003488:	f04f 0e00 	mov.w	lr, #0
 800348c:	4401      	add	r1, r0
 800348e:	ebac 0202 	sub.w	r2, ip, r2
 8003492:	ed73 7a01 	vldmdb	r3!, {s15}
 8003496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	d40b      	bmi.n	80034b8 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 80034a0:	4293      	cmp	r3, r2
 80034a2:	f841 ed04 	str.w	lr, [r1, #-4]!
 80034a6:	d1f4      	bne.n	8003492 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80034a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	4293      	cmp	r3, r2
 80034b0:	ed61 7a01 	vstmdb	r1!, {s15}
 80034b4:	d1d2      	bne.n	800345c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80034b6:	4770      	bx	lr
 80034b8:	4293      	cmp	r3, r2
 80034ba:	ed61 7a01 	vstmdb	r1!, {s15}
 80034be:	d1e8      	bne.n	8003492 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80034c0:	e7f2      	b.n	80034a8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80034c2:	bf00      	nop

080034c4 <forward_lite_dense_if32of32wf32>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80034cc:	6801      	ldr	r1, [r0, #0]
 80034ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	b083      	sub	sp, #12
 80034d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80034dc:	4299      	cmp	r1, r3
 80034de:	9100      	str	r1, [sp, #0]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f080 811e 	bcs.w	8003722 <forward_lite_dense_if32of32wf32+0x25e>
 80034e6:	6904      	ldr	r4, [r0, #16]
 80034e8:	4607      	mov	r7, r0
 80034ea:	0096      	lsls	r6, r2, #2
 80034ec:	9b00      	ldr	r3, [sp, #0]
 80034ee:	68bd      	ldr	r5, [r7, #8]
 80034f0:	eb03 0e06 	add.w	lr, r3, r6
 80034f4:	459e      	cmp	lr, r3
 80034f6:	461e      	mov	r6, r3
 80034f8:	f240 8104 	bls.w	8003704 <forward_lite_dense_if32of32wf32+0x240>
 80034fc:	f1a4 0c10 	sub.w	ip, r4, #16
 8003500:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8003504:	f10c 0c01 	add.w	ip, ip, #1
 8003508:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800350c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8003510:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8003514:	2c0f      	cmp	r4, #15
 8003516:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8003774 <forward_lite_dense_if32of32wf32+0x2b0>
 800351a:	f240 8105 	bls.w	8003728 <forward_lite_dense_if32of32wf32+0x264>
 800351e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8003522:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8003526:	4621      	mov	r1, r4
 8003528:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800352c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8003530:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8003534:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8003538:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800353c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8003540:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8003544:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8003548:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800354c:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8003550:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8003554:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8003558:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800355c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003560:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8003564:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003568:	3910      	subs	r1, #16
 800356a:	290f      	cmp	r1, #15
 800356c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8003570:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8003574:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003578:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800357c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003580:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8003584:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8003588:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800358c:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8003590:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8003594:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003598:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800359c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 80035a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80035a4:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 80035a8:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 80035ac:	eee3 7a23 	vfma.f32	s15, s6, s7
 80035b0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80035b4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80035b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80035bc:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80035c0:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80035c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80035c8:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80035cc:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80035d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80035d4:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80035d8:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80035dc:	eee1 7a21 	vfma.f32	s15, s2, s3
 80035e0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80035e4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80035e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80035ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80035f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80035f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f8:	d896      	bhi.n	8003528 <forward_lite_dense_if32of32wf32+0x64>
 80035fa:	eb05 020b 	add.w	r2, r5, fp
 80035fe:	f004 010f 	and.w	r1, r4, #15
 8003602:	4663      	mov	r3, ip
 8003604:	2903      	cmp	r1, #3
 8003606:	d95f      	bls.n	80036c8 <forward_lite_dense_if32of32wf32+0x204>
 8003608:	edd2 6a01 	vldr	s13, [r2, #4]
 800360c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003610:	ed93 6a00 	vldr	s12, [r3]
 8003614:	ed93 5a02 	vldr	s10, [r3, #8]
 8003618:	edd2 5a02 	vldr	s11, [r2, #8]
 800361c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003620:	edd2 6a00 	vldr	s13, [r2]
 8003624:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003628:	1f08      	subs	r0, r1, #4
 800362a:	2803      	cmp	r0, #3
 800362c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003630:	edd2 6a03 	vldr	s13, [r2, #12]
 8003634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003638:	eee5 7a25 	vfma.f32	s15, s10, s11
 800363c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003640:	eeb0 7a67 	vmov.f32	s14, s15
 8003644:	d938      	bls.n	80036b8 <forward_lite_dense_if32of32wf32+0x1f4>
 8003646:	edd2 6a05 	vldr	s13, [r2, #20]
 800364a:	edd3 7a05 	vldr	s15, [r3, #20]
 800364e:	ed93 6a04 	vldr	s12, [r3, #16]
 8003652:	ed93 5a06 	vldr	s10, [r3, #24]
 8003656:	edd2 5a06 	vldr	s11, [r2, #24]
 800365a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800365e:	edd2 6a04 	vldr	s13, [r2, #16]
 8003662:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003666:	f1a1 0a08 	sub.w	sl, r1, #8
 800366a:	f1ba 0f03 	cmp.w	sl, #3
 800366e:	ed93 6a07 	vldr	s12, [r3, #28]
 8003672:	edd2 6a07 	vldr	s13, [r2, #28]
 8003676:	eee5 7a25 	vfma.f32	s15, s10, s11
 800367a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800367e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003682:	d919      	bls.n	80036b8 <forward_lite_dense_if32of32wf32+0x1f4>
 8003684:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003688:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800368c:	ed92 6a08 	vldr	s12, [r2, #32]
 8003690:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8003694:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8003698:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800369c:	edd3 6a08 	vldr	s13, [r3, #32]
 80036a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80036a4:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80036a8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80036ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80036b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80036b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b8:	0880      	lsrs	r0, r0, #2
 80036ba:	3001      	adds	r0, #1
 80036bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80036c0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80036c4:	f001 0103 	and.w	r1, r1, #3
 80036c8:	b1a9      	cbz	r1, 80036f6 <forward_lite_dense_if32of32wf32+0x232>
 80036ca:	edd3 6a00 	vldr	s13, [r3]
 80036ce:	edd2 7a00 	vldr	s15, [r2]
 80036d2:	3901      	subs	r1, #1
 80036d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80036d8:	d00d      	beq.n	80036f6 <forward_lite_dense_if32of32wf32+0x232>
 80036da:	edd3 6a01 	vldr	s13, [r3, #4]
 80036de:	edd2 7a01 	vldr	s15, [r2, #4]
 80036e2:	2901      	cmp	r1, #1
 80036e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80036e8:	d005      	beq.n	80036f6 <forward_lite_dense_if32of32wf32+0x232>
 80036ea:	edd2 6a02 	vldr	s13, [r2, #8]
 80036ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80036f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80036f6:	444d      	add	r5, r9
 80036f8:	eca6 7a01 	vstmia	r6!, {s14}
 80036fc:	45b6      	cmp	lr, r6
 80036fe:	f63f af09 	bhi.w	8003514 <forward_lite_dense_if32of32wf32+0x50>
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	b99b      	cbnz	r3, 8003730 <forward_lite_dense_if32of32wf32+0x26c>
 8003708:	9b00      	ldr	r3, [sp, #0]
 800370a:	9901      	ldr	r1, [sp, #4]
 800370c:	693c      	ldr	r4, [r7, #16]
 800370e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003712:	4299      	cmp	r1, r3
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800371a:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800371e:	f63f aee5 	bhi.w	80034ec <forward_lite_dense_if32of32wf32+0x28>
 8003722:	b003      	add	sp, #12
 8003724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003728:	4621      	mov	r1, r4
 800372a:	462a      	mov	r2, r5
 800372c:	4643      	mov	r3, r8
 800372e:	e769      	b.n	8003604 <forward_lite_dense_if32of32wf32+0x140>
 8003730:	2a00      	cmp	r2, #0
 8003732:	d0e9      	beq.n	8003708 <forward_lite_dense_if32of32wf32+0x244>
 8003734:	9a00      	ldr	r2, [sp, #0]
 8003736:	ed93 7a00 	vldr	s14, [r3]
 800373a:	edd2 7a00 	vldr	s15, [r2]
 800373e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003742:	4613      	mov	r3, r2
 8003744:	edc2 7a00 	vstr	s15, [r2]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	2a01      	cmp	r2, #1
 800374c:	d9dc      	bls.n	8003708 <forward_lite_dense_if32of32wf32+0x244>
 800374e:	1d19      	adds	r1, r3, #4
 8003750:	2301      	movs	r3, #1
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	ed91 7a00 	vldr	s14, [r1]
 8003758:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800375c:	edd2 7a00 	vldr	s15, [r2]
 8003760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003764:	3301      	adds	r3, #1
 8003766:	ece1 7a01 	vstmia	r1!, {s15}
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d8f0      	bhi.n	8003752 <forward_lite_dense_if32of32wf32+0x28e>
 8003770:	e7ca      	b.n	8003708 <forward_lite_dense_if32of32wf32+0x244>
 8003772:	bf00      	nop
 8003774:	00000000 	.word	0x00000000

08003778 <forward_lite_dense_if32of32wf32_lut4>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	b08d      	sub	sp, #52	@ 0x34
 800377e:	4605      	mov	r5, r0
 8003780:	9005      	str	r0, [sp, #20]
 8003782:	920a      	str	r2, [sp, #40]	@ 0x28
 8003784:	4618      	mov	r0, r3
 8003786:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800378a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003794:	460c      	mov	r4, r1
 8003796:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8003798:	9308      	str	r3, [sp, #32]
 800379a:	b126      	cbz	r6, 80037a6 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800379c:	2240      	movs	r2, #64	@ 0x40
 800379e:	4631      	mov	r1, r6
 80037a0:	f000 fa40 	bl	8003c24 <st_int8_copy>
 80037a4:	4630      	mov	r0, r6
 80037a6:	9b05      	ldr	r3, [sp, #20]
 80037a8:	9a08      	ldr	r2, [sp, #32]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f080 80f5 	bcs.w	800399a <forward_lite_dense_if32of32wf32_lut4+0x222>
 80037b0:	08eb      	lsrs	r3, r5, #3
 80037b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	f005 0101 	and.w	r1, r5, #1
 80037ba:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	0092      	lsls	r2, r2, #2
 80037c2:	f025 0801 	bic.w	r8, r5, #1
 80037c6:	9102      	str	r1, [sp, #8]
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	00a9      	lsls	r1, r5, #2
 80037cc:	9b05      	ldr	r3, [sp, #20]
 80037ce:	9207      	str	r2, [sp, #28]
 80037d0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80037d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80037d6:	f104 0b20 	add.w	fp, r4, #32
 80037da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80037dc:	9a07      	ldr	r2, [sp, #28]
 80037de:	eb03 0902 	add.w	r9, r3, r2
 80037e2:	4599      	cmp	r9, r3
 80037e4:	f1ab 0220 	sub.w	r2, fp, #32
 80037e8:	9206      	str	r2, [sp, #24]
 80037ea:	f240 80d9 	bls.w	80039a0 <forward_lite_dense_if32of32wf32_lut4+0x228>
 80037ee:	469e      	mov	lr, r3
 80037f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80037f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80037f6:	9303      	str	r3, [sp, #12]
 80037f8:	9b01      	ldr	r3, [sp, #4]
 80037fa:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80039c4 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80b2 	beq.w	8003968 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8003804:	9b04      	ldr	r3, [sp, #16]
 8003806:	18d5      	adds	r5, r2, r3
 8003808:	465b      	mov	r3, fp
 800380a:	7814      	ldrb	r4, [r2, #0]
 800380c:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8003810:	7851      	ldrb	r1, [r2, #1]
 8003812:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8003816:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800381a:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800381e:	ed13 5a04 	vldr	s10, [r3, #-16]
 8003822:	ed53 5a03 	vldr	s11, [r3, #-12]
 8003826:	ed13 6a02 	vldr	s12, [r3, #-8]
 800382a:	ed53 6a01 	vldr	s13, [r3, #-4]
 800382e:	f004 060f 	and.w	r6, r4, #15
 8003832:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003836:	edd6 7a00 	vldr	s15, [r6]
 800383a:	0924      	lsrs	r4, r4, #4
 800383c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003840:	ed94 3a00 	vldr	s6, [r4]
 8003844:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8003848:	090c      	lsrs	r4, r1, #4
 800384a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800384e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003852:	f001 010f 	and.w	r1, r1, #15
 8003856:	edd4 3a00 	vldr	s7, [r4]
 800385a:	7894      	ldrb	r4, [r2, #2]
 800385c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003860:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003864:	0926      	lsrs	r6, r4, #4
 8003866:	ed91 4a00 	vldr	s8, [r1]
 800386a:	78d1      	ldrb	r1, [r2, #3]
 800386c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003870:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003874:	f004 040f 	and.w	r4, r4, #15
 8003878:	edd6 4a00 	vldr	s9, [r6]
 800387c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003880:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003884:	3204      	adds	r2, #4
 8003886:	ed94 5a00 	vldr	s10, [r4]
 800388a:	090c      	lsrs	r4, r1, #4
 800388c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003890:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003894:	f001 010f 	and.w	r1, r1, #15
 8003898:	edd4 5a00 	vldr	s11, [r4]
 800389c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80038a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80038a4:	42aa      	cmp	r2, r5
 80038a6:	ed91 6a00 	vldr	s12, [r1]
 80038aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80038ae:	f103 0320 	add.w	r3, r3, #32
 80038b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b6:	d1a8      	bne.n	800380a <forward_lite_dense_if32of32wf32_lut4+0x92>
 80038b8:	4656      	mov	r6, sl
 80038ba:	4546      	cmp	r6, r8
 80038bc:	d258      	bcs.n	8003970 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	1b9c      	subs	r4, r3, r6
 80038c2:	08e7      	lsrs	r7, r4, #3
 80038c4:	f106 0208 	add.w	r2, r6, #8
 80038c8:	1e69      	subs	r1, r5, #1
 80038ca:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 80038ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80038d2:	ed52 5a01 	vldr	s11, [r2, #-4]
 80038d6:	ed52 6a02 	vldr	s13, [r2, #-8]
 80038da:	f003 0c0f 	and.w	ip, r3, #15
 80038de:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80038e2:	eddc 7a00 	vldr	s15, [ip]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038ec:	ed93 6a00 	vldr	s12, [r3]
 80038f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80038f4:	42a1      	cmp	r1, r4
 80038f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80038fa:	f102 0208 	add.w	r2, r2, #8
 80038fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003902:	d1e4      	bne.n	80038ce <forward_lite_dense_if32of32wf32_lut4+0x156>
 8003904:	3701      	adds	r7, #1
 8003906:	19ea      	adds	r2, r5, r7
 8003908:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800390c:	9b02      	ldr	r3, [sp, #8]
 800390e:	b30b      	cbz	r3, 8003954 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8003910:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003914:	edd6 7a00 	vldr	s15, [r6]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800391e:	edd3 6a00 	vldr	s13, [r3]
 8003922:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003926:	ecae 7a01 	vstmia	lr!, {s14}
 800392a:	45f1      	cmp	r9, lr
 800392c:	f63f af64 	bhi.w	80037f8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8003930:	9b05      	ldr	r3, [sp, #20]
 8003932:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003934:	1899      	adds	r1, r3, r2
 8003936:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003938:	b9e3      	cbnz	r3, 8003974 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800393a:	9b08      	ldr	r3, [sp, #32]
 800393c:	428b      	cmp	r3, r1
 800393e:	d92c      	bls.n	800399a <forward_lite_dense_if32of32wf32_lut4+0x222>
 8003940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003942:	4498      	add	r8, r3
 8003944:	449a      	add	sl, r3
 8003946:	449b      	add	fp, r3
 8003948:	9b05      	ldr	r3, [sp, #20]
 800394a:	4599      	cmp	r9, r3
 800394c:	d92a      	bls.n	80039a4 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800394e:	9105      	str	r1, [sp, #20]
 8003950:	460b      	mov	r3, r1
 8003952:	e743      	b.n	80037dc <forward_lite_dense_if32of32wf32_lut4+0x64>
 8003954:	ecae 7a01 	vstmia	lr!, {s14}
 8003958:	45f1      	cmp	r9, lr
 800395a:	d9e9      	bls.n	8003930 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800395c:	9b01      	ldr	r3, [sp, #4]
 800395e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80039c4 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8003962:	2b00      	cmp	r3, #0
 8003964:	f47f af4e 	bne.w	8003804 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8003968:	9e06      	ldr	r6, [sp, #24]
 800396a:	4546      	cmp	r6, r8
 800396c:	4615      	mov	r5, r2
 800396e:	d3a6      	bcc.n	80038be <forward_lite_dense_if32of32wf32_lut4+0x146>
 8003970:	462a      	mov	r2, r5
 8003972:	e7cb      	b.n	800390c <forward_lite_dense_if32of32wf32_lut4+0x194>
 8003974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0df      	beq.n	800393a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800397a:	9b07      	ldr	r3, [sp, #28]
 800397c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800397e:	1acb      	subs	r3, r1, r3
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	ecb2 7a01 	vldmia	r2!, {s14}
 8003988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800398c:	ece3 7a01 	vstmia	r3!, {s15}
 8003990:	428b      	cmp	r3, r1
 8003992:	d1f5      	bne.n	8003980 <forward_lite_dense_if32of32wf32_lut4+0x208>
 8003994:	9b08      	ldr	r3, [sp, #32]
 8003996:	428b      	cmp	r3, r1
 8003998:	d8d2      	bhi.n	8003940 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800399a:	b00d      	add	sp, #52	@ 0x34
 800399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a0:	4619      	mov	r1, r3
 80039a2:	e7c8      	b.n	8003936 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 80039a4:	9b07      	ldr	r3, [sp, #28]
 80039a6:	1acb      	subs	r3, r1, r3
 80039a8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80039aa:	461a      	mov	r2, r3
 80039ac:	ed92 7a00 	vldr	s14, [r2]
 80039b0:	ecf0 7a01 	vldmia	r0!, {s15}
 80039b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039b8:	ece2 7a01 	vstmia	r2!, {s15}
 80039bc:	428a      	cmp	r2, r1
 80039be:	d1f5      	bne.n	80039ac <forward_lite_dense_if32of32wf32_lut4+0x234>
 80039c0:	e7f2      	b.n	80039a8 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80039c2:	bf00      	nop
 80039c4:	00000000 	.word	0x00000000

080039c8 <forward_lite_dense_if32of32wf32_lut8>:
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	b087      	sub	sp, #28
 80039ce:	460f      	mov	r7, r1
 80039d0:	9204      	str	r2, [sp, #16]
 80039d2:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 80039d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80039d8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80039da:	fb01 f202 	mul.w	r2, r1, r2
 80039de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039e2:	4605      	mov	r5, r0
 80039e4:	9202      	str	r2, [sp, #8]
 80039e6:	b136      	cbz	r6, 80039f6 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 80039e8:	4618      	mov	r0, r3
 80039ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ee:	4631      	mov	r1, r6
 80039f0:	f000 f918 	bl	8003c24 <st_int8_copy>
 80039f4:	4633      	mov	r3, r6
 80039f6:	9a02      	ldr	r2, [sp, #8]
 80039f8:	4295      	cmp	r5, r2
 80039fa:	f080 80f9 	bcs.w	8003bf0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80039fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8003a06:	9201      	str	r2, [sp, #4]
 8003a08:	9205      	str	r2, [sp, #20]
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8003a10:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8003a14:	464d      	mov	r5, r9
 8003a16:	4691      	mov	r9, r2
 8003a18:	9a01      	ldr	r2, [sp, #4]
 8003a1a:	eb09 0e02 	add.w	lr, r9, r2
 8003a1e:	00a1      	lsls	r1, r4, #2
 8003a20:	3720      	adds	r7, #32
 8003a22:	45ce      	cmp	lr, r9
 8003a24:	f004 0007 	and.w	r0, r4, #7
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	f1a7 0b20 	sub.w	fp, r7, #32
 8003a2e:	f240 80c8 	bls.w	8003bc2 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8003a32:	9a04      	ldr	r2, [sp, #16]
 8003a34:	46cc      	mov	ip, r9
 8003a36:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003c20 <forward_lite_dense_if32of32wf32_lut8+0x258>
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	f000 80dd 	beq.w	8003bfa <forward_lite_dense_if32of32wf32_lut8+0x232>
 8003a40:	eb02 060a 	add.w	r6, r2, sl
 8003a44:	4639      	mov	r1, r7
 8003a46:	7854      	ldrb	r4, [r2, #1]
 8003a48:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8003a4c:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8003a50:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8003a54:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8003a58:	ed11 5a04 	vldr	s10, [r1, #-16]
 8003a5c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8003a60:	ed11 6a02 	vldr	s12, [r1, #-8]
 8003a64:	ed51 6a01 	vldr	s13, [r1, #-4]
 8003a68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003a6c:	edd4 7a00 	vldr	s15, [r4]
 8003a70:	7814      	ldrb	r4, [r2, #0]
 8003a72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003a76:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003a7a:	ed94 3a00 	vldr	s6, [r4]
 8003a7e:	7894      	ldrb	r4, [r2, #2]
 8003a80:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003a84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003a88:	3208      	adds	r2, #8
 8003a8a:	edd4 3a00 	vldr	s7, [r4]
 8003a8e:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8003a92:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003a96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003a9a:	3120      	adds	r1, #32
 8003a9c:	ed94 4a00 	vldr	s8, [r4]
 8003aa0:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8003aa4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003aa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003aac:	edd4 4a00 	vldr	s9, [r4]
 8003ab0:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8003ab4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003ab8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003abc:	ed94 5a00 	vldr	s10, [r4]
 8003ac0:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8003ac4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003ac8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003acc:	edd4 5a00 	vldr	s11, [r4]
 8003ad0:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8003ad4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003ad8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003adc:	42b2      	cmp	r2, r6
 8003ade:	ed94 6a00 	vldr	s12, [r4]
 8003ae2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aea:	d1ac      	bne.n	8003a46 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8003aec:	4642      	mov	r2, r8
 8003aee:	2800      	cmp	r0, #0
 8003af0:	f000 8081 	beq.w	8003bf6 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8003af4:	7831      	ldrb	r1, [r6, #0]
 8003af6:	edd2 7a00 	vldr	s15, [r2]
 8003afa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003afe:	edd1 6a00 	vldr	s13, [r1]
 8003b02:	2801      	cmp	r0, #1
 8003b04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b08:	d03f      	beq.n	8003b8a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8003b0a:	7871      	ldrb	r1, [r6, #1]
 8003b0c:	edd2 7a01 	vldr	s15, [r2, #4]
 8003b10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003b14:	edd1 6a00 	vldr	s13, [r1]
 8003b18:	2802      	cmp	r0, #2
 8003b1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b1e:	d034      	beq.n	8003b8a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8003b20:	78b1      	ldrb	r1, [r6, #2]
 8003b22:	edd2 7a02 	vldr	s15, [r2, #8]
 8003b26:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003b2a:	edd1 6a00 	vldr	s13, [r1]
 8003b2e:	2803      	cmp	r0, #3
 8003b30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b34:	d029      	beq.n	8003b8a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8003b36:	78f1      	ldrb	r1, [r6, #3]
 8003b38:	edd2 6a03 	vldr	s13, [r2, #12]
 8003b3c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003b40:	edd1 7a00 	vldr	s15, [r1]
 8003b44:	2804      	cmp	r0, #4
 8003b46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b4a:	d01e      	beq.n	8003b8a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8003b4c:	7931      	ldrb	r1, [r6, #4]
 8003b4e:	edd2 6a04 	vldr	s13, [r2, #16]
 8003b52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003b56:	edd1 7a00 	vldr	s15, [r1]
 8003b5a:	2805      	cmp	r0, #5
 8003b5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b60:	d013      	beq.n	8003b8a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8003b62:	7971      	ldrb	r1, [r6, #5]
 8003b64:	edd2 6a05 	vldr	s13, [r2, #20]
 8003b68:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003b6c:	edd1 7a00 	vldr	s15, [r1]
 8003b70:	2806      	cmp	r0, #6
 8003b72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b76:	d008      	beq.n	8003b8a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8003b78:	edd2 7a06 	vldr	s15, [r2, #24]
 8003b7c:	79b2      	ldrb	r2, [r6, #6]
 8003b7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003b82:	edd2 6a00 	vldr	s13, [r2]
 8003b86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b8a:	1832      	adds	r2, r6, r0
 8003b8c:	ecac 7a01 	vstmia	ip!, {s14}
 8003b90:	45e6      	cmp	lr, ip
 8003b92:	f63f af50 	bhi.w	8003a36 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8003b96:	9a05      	ldr	r2, [sp, #20]
 8003b98:	eb09 0402 	add.w	r4, r9, r2
 8003b9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003b9e:	b9a2      	cbnz	r2, 8003bca <forward_lite_dense_if32of32wf32_lut8+0x202>
 8003ba0:	9a02      	ldr	r2, [sp, #8]
 8003ba2:	42a2      	cmp	r2, r4
 8003ba4:	d924      	bls.n	8003bf0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8003ba6:	9a03      	ldr	r2, [sp, #12]
 8003ba8:	45ce      	cmp	lr, r9
 8003baa:	4490      	add	r8, r2
 8003bac:	4417      	add	r7, r2
 8003bae:	d927      	bls.n	8003c00 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8003bb0:	9a01      	ldr	r2, [sp, #4]
 8003bb2:	46a1      	mov	r9, r4
 8003bb4:	eb09 0e02 	add.w	lr, r9, r2
 8003bb8:	45ce      	cmp	lr, r9
 8003bba:	f1a7 0b20 	sub.w	fp, r7, #32
 8003bbe:	f63f af38 	bhi.w	8003a32 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8003bc2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003bc4:	464c      	mov	r4, r9
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d0ea      	beq.n	8003ba0 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8003bca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003bcc:	2a00      	cmp	r2, #0
 8003bce:	d0e7      	beq.n	8003ba0 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8003bd0:	9a01      	ldr	r2, [sp, #4]
 8003bd2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8003bd4:	1aa2      	subs	r2, r4, r2
 8003bd6:	edd2 7a00 	vldr	s15, [r2]
 8003bda:	ecb1 7a01 	vldmia	r1!, {s14}
 8003bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be2:	ece2 7a01 	vstmia	r2!, {s15}
 8003be6:	4294      	cmp	r4, r2
 8003be8:	d1f5      	bne.n	8003bd6 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8003bea:	9a02      	ldr	r2, [sp, #8]
 8003bec:	42a2      	cmp	r2, r4
 8003bee:	d8da      	bhi.n	8003ba6 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8003bf0:	b007      	add	sp, #28
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf6:	4632      	mov	r2, r6
 8003bf8:	e7c8      	b.n	8003b8c <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8003bfa:	4616      	mov	r6, r2
 8003bfc:	465a      	mov	r2, fp
 8003bfe:	e776      	b.n	8003aee <forward_lite_dense_if32of32wf32_lut8+0x126>
 8003c00:	9b01      	ldr	r3, [sp, #4]
 8003c02:	1ae3      	subs	r3, r4, r3
 8003c04:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8003c06:	461a      	mov	r2, r3
 8003c08:	ed92 7a00 	vldr	s14, [r2]
 8003c0c:	ecf1 7a01 	vldmia	r1!, {s15}
 8003c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c14:	ece2 7a01 	vstmia	r2!, {s15}
 8003c18:	42a2      	cmp	r2, r4
 8003c1a:	d1f5      	bne.n	8003c08 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8003c1c:	e7f2      	b.n	8003c04 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8003c1e:	bf00      	nop
 8003c20:	00000000 	.word	0x00000000

08003c24 <st_int8_copy>:
 8003c24:	4288      	cmp	r0, r1
 8003c26:	d022      	beq.n	8003c6e <st_int8_copy+0x4a>
 8003c28:	b30a      	cbz	r2, 8003c6e <st_int8_copy+0x4a>
 8003c2a:	4288      	cmp	r0, r1
 8003c2c:	d312      	bcc.n	8003c54 <st_int8_copy+0x30>
 8003c2e:	2a03      	cmp	r2, #3
 8003c30:	d81e      	bhi.n	8003c70 <st_int8_copy+0x4c>
 8003c32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c36:	f801 3b01 	strb.w	r3, [r1], #1
 8003c3a:	2a01      	cmp	r2, #1
 8003c3c:	d017      	beq.n	8003c6e <st_int8_copy+0x4a>
 8003c3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c42:	f801 3b01 	strb.w	r3, [r1], #1
 8003c46:	2a02      	cmp	r2, #2
 8003c48:	d011      	beq.n	8003c6e <st_int8_copy+0x4a>
 8003c4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c4e:	f801 3b01 	strb.w	r3, [r1], #1
 8003c52:	4770      	bx	lr
 8003c54:	1883      	adds	r3, r0, r2
 8003c56:	4299      	cmp	r1, r3
 8003c58:	d2e9      	bcs.n	8003c2e <st_int8_copy+0xa>
 8003c5a:	4298      	cmp	r0, r3
 8003c5c:	440a      	add	r2, r1
 8003c5e:	d206      	bcs.n	8003c6e <st_int8_copy+0x4a>
 8003c60:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8003c64:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8003c68:	4298      	cmp	r0, r3
 8003c6a:	d1f9      	bne.n	8003c60 <st_int8_copy+0x3c>
 8003c6c:	4770      	bx	lr
 8003c6e:	4770      	bx	lr
 8003c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c74:	f001 0403 	and.w	r4, r1, #3
 8003c78:	f1c4 0304 	rsb	r3, r4, #4
 8003c7c:	f000 0e03 	and.w	lr, r0, #3
 8003c80:	eba2 0c03 	sub.w	ip, r2, r3
 8003c84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c88:	f801 3b01 	strb.w	r3, [r1], #1
 8003c8c:	2c03      	cmp	r4, #3
 8003c8e:	f1c4 0202 	rsb	r2, r4, #2
 8003c92:	d00e      	beq.n	8003cb2 <st_int8_copy+0x8e>
 8003c94:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c98:	f801 3b01 	strb.w	r3, [r1], #1
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	dd08      	ble.n	8003cb2 <st_int8_copy+0x8e>
 8003ca0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003ca4:	f801 3b01 	strb.w	r3, [r1], #1
 8003ca8:	b91c      	cbnz	r4, 8003cb2 <st_int8_copy+0x8e>
 8003caa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003cae:	f801 3b01 	strb.w	r3, [r1], #1
 8003cb2:	4574      	cmp	r4, lr
 8003cb4:	d02b      	beq.n	8003d0e <st_int8_copy+0xea>
 8003cb6:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8003cba:	1e5a      	subs	r2, r3, #1
 8003cbc:	b153      	cbz	r3, 8003cd4 <st_int8_copy+0xb0>
 8003cbe:	f850 3b04 	ldr.w	r3, [r0], #4
 8003cc2:	f850 4b04 	ldr.w	r4, [r0], #4
 8003cc6:	f850 5b04 	ldr.w	r5, [r0], #4
 8003cca:	f850 6b04 	ldr.w	r6, [r0], #4
 8003cce:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	d2f4      	bcs.n	8003cbe <st_int8_copy+0x9a>
 8003cd4:	f01c 0f08 	tst.w	ip, #8
 8003cd8:	d004      	beq.n	8003ce4 <st_int8_copy+0xc0>
 8003cda:	f850 3b04 	ldr.w	r3, [r0], #4
 8003cde:	f850 4b04 	ldr.w	r4, [r0], #4
 8003ce2:	c118      	stmia	r1!, {r3, r4}
 8003ce4:	f01c 0f04 	tst.w	ip, #4
 8003ce8:	d003      	beq.n	8003cf2 <st_int8_copy+0xce>
 8003cea:	f850 3b04 	ldr.w	r3, [r0], #4
 8003cee:	f841 3b04 	str.w	r3, [r1], #4
 8003cf2:	f01c 0f02 	tst.w	ip, #2
 8003cf6:	d003      	beq.n	8003d00 <st_int8_copy+0xdc>
 8003cf8:	f830 3b02 	ldrh.w	r3, [r0], #2
 8003cfc:	f821 3b02 	strh.w	r3, [r1], #2
 8003d00:	f01c 0f01 	tst.w	ip, #1
 8003d04:	d001      	beq.n	8003d0a <st_int8_copy+0xe6>
 8003d06:	7803      	ldrb	r3, [r0, #0]
 8003d08:	700b      	strb	r3, [r1, #0]
 8003d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d0e:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8003d12:	f103 39ff 	add.w	r9, r3, #4294967295
 8003d16:	b183      	cbz	r3, 8003d3a <st_int8_copy+0x116>
 8003d18:	4688      	mov	r8, r1
 8003d1a:	4686      	mov	lr, r0
 8003d1c:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003d20:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003d24:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003d28:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003d2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003d30:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003d34:	4641      	mov	r1, r8
 8003d36:	4670      	mov	r0, lr
 8003d38:	d1ee      	bne.n	8003d18 <st_int8_copy+0xf4>
 8003d3a:	f01c 0f20 	tst.w	ip, #32
 8003d3e:	d007      	beq.n	8003d50 <st_int8_copy+0x12c>
 8003d40:	4688      	mov	r8, r1
 8003d42:	4686      	mov	lr, r0
 8003d44:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003d48:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	4670      	mov	r0, lr
 8003d50:	f01c 0f10 	tst.w	ip, #16
 8003d54:	d001      	beq.n	8003d5a <st_int8_copy+0x136>
 8003d56:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8003d58:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8003d5a:	f01c 0f08 	tst.w	ip, #8
 8003d5e:	d0c1      	beq.n	8003ce4 <st_int8_copy+0xc0>
 8003d60:	c818      	ldmia	r0!, {r3, r4}
 8003d62:	c118      	stmia	r1!, {r3, r4}
 8003d64:	e7be      	b.n	8003ce4 <st_int8_copy+0xc0>
 8003d66:	bf00      	nop

08003d68 <ai_array_to_buffer_fmt>:
 8003d68:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d055      	beq.n	8003e1c <ai_array_to_buffer_fmt+0xb4>
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <ai_array_to_buffer_fmt+0xc0>)
 8003d72:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d010      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003d7a:	dc21      	bgt.n	8003dc0 <ai_array_to_buffer_fmt+0x58>
 8003d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e2c <ai_array_to_buffer_fmt+0xc4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00c      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003d82:	dd0f      	ble.n	8003da4 <ai_array_to_buffer_fmt+0x3c>
 8003d84:	4a2a      	ldr	r2, [pc, #168]	@ (8003e30 <ai_array_to_buffer_fmt+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d008      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003d8a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003d92:	4a28      	ldr	r2, [pc, #160]	@ (8003e34 <ai_array_to_buffer_fmt+0xcc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	bf0c      	ite	eq
 8003d98:	4613      	moveq	r3, r2
 8003d9a:	2340      	movne	r3, #64	@ 0x40
 8003d9c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8003da0:	4318      	orrs	r0, r3
 8003da2:	4770      	bx	lr
 8003da4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d0f7      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003dac:	dd2c      	ble.n	8003e08 <ai_array_to_buffer_fmt+0xa0>
 8003dae:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <ai_array_to_buffer_fmt+0xd0>)
 8003db0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8003db4:	4293      	cmp	r3, r2
 8003db6:	bf0c      	ite	eq
 8003db8:	4613      	moveq	r3, r2
 8003dba:	2340      	movne	r3, #64	@ 0x40
 8003dbc:	4318      	orrs	r0, r3
 8003dbe:	4770      	bx	lr
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e3c <ai_array_to_buffer_fmt+0xd4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d0ea      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003dc6:	dd10      	ble.n	8003dea <ai_array_to_buffer_fmt+0x82>
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e40 <ai_array_to_buffer_fmt+0xd8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d0e6      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003dce:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d0e2      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003dd6:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bf0c      	ite	eq
 8003dde:	4613      	moveq	r3, r2
 8003de0:	2340      	movne	r3, #64	@ 0x40
 8003de2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8003de6:	4318      	orrs	r0, r3
 8003de8:	4770      	bx	lr
 8003dea:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d0d4      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003df2:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d0d0      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003dfa:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	bf0c      	ite	eq
 8003e02:	4613      	moveq	r3, r2
 8003e04:	2340      	movne	r3, #64	@ 0x40
 8003e06:	e7c9      	b.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003e08:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d0c5      	beq.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003e10:	3280      	adds	r2, #128	@ 0x80
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bf0c      	ite	eq
 8003e16:	4613      	moveq	r3, r2
 8003e18:	2340      	movne	r3, #64	@ 0x40
 8003e1a:	e7bf      	b.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <ai_array_to_buffer_fmt+0xdc>)
 8003e1e:	4003      	ands	r3, r0
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e24:	e7ba      	b.n	8003d9c <ai_array_to_buffer_fmt+0x34>
 8003e26:	bf00      	nop
 8003e28:	00821040 	.word	0x00821040
 8003e2c:	00040840 	.word	0x00040840
 8003e30:	00041040 	.word	0x00041040
 8003e34:	0004084f 	.word	0x0004084f
 8003e38:	00040447 	.word	0x00040447
 8003e3c:	00840447 	.word	0x00840447
 8003e40:	0084084f 	.word	0x0084084f
 8003e44:	00803fff 	.word	0x00803fff

08003e48 <ai_array_get_data_byte_size>:
 8003e48:	b169      	cbz	r1, 8003e66 <ai_array_get_data_byte_size+0x1e>
 8003e4a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8003e4e:	fb03 f101 	mul.w	r1, r3, r1
 8003e52:	1dcb      	adds	r3, r1, #7
 8003e54:	f023 0307 	bic.w	r3, r3, #7
 8003e58:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8003e5c:	fa23 f000 	lsr.w	r0, r3, r0
 8003e60:	3007      	adds	r0, #7
 8003e62:	08c0      	lsrs	r0, r0, #3
 8003e64:	4770      	bx	lr
 8003e66:	4608      	mov	r0, r1
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <ai_version_get>:
 8003e6c:	0212      	lsls	r2, r2, #8
 8003e6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e72:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8003e76:	4770      	bx	lr

08003e78 <ai_platform_version_get>:
 8003e78:	0e02      	lsrs	r2, r0, #24
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f362 0307 	bfi	r3, r2, #0, #8
 8003e80:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8003e84:	f362 230f 	bfi	r3, r2, #8, #8
 8003e88:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003e8c:	f360 4317 	bfi	r3, r0, #16, #8
 8003e90:	b082      	sub	sp, #8
 8003e92:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8003e96:	b002      	add	sp, #8
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop

08003e9c <get_tensor_byte_size>:
 8003e9c:	b410      	push	{r4}
 8003e9e:	6983      	ldr	r3, [r0, #24]
 8003ea0:	68c4      	ldr	r4, [r0, #12]
 8003ea2:	6941      	ldr	r1, [r0, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68e0      	ldr	r0, [r4, #12]
 8003ea8:	4a07      	ldr	r2, [pc, #28]	@ (8003ec8 <get_tensor_byte_size+0x2c>)
 8003eaa:	68c9      	ldr	r1, [r1, #12]
 8003eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003eb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003eb8:	fb01 f000 	mul.w	r0, r1, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf04      	itt	eq
 8003ec0:	3007      	addeq	r0, #7
 8003ec2:	08c0      	lsreq	r0, r0, #3
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	000400c0 	.word	0x000400c0

08003ecc <memset>:
 8003ecc:	4402      	add	r2, r0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <__libc_init_array>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4d0d      	ldr	r5, [pc, #52]	@ (8003f14 <__libc_init_array+0x38>)
 8003ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8003f18 <__libc_init_array+0x3c>)
 8003ee2:	1b64      	subs	r4, r4, r5
 8003ee4:	10a4      	asrs	r4, r4, #2
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	42a6      	cmp	r6, r4
 8003eea:	d109      	bne.n	8003f00 <__libc_init_array+0x24>
 8003eec:	4d0b      	ldr	r5, [pc, #44]	@ (8003f1c <__libc_init_array+0x40>)
 8003eee:	4c0c      	ldr	r4, [pc, #48]	@ (8003f20 <__libc_init_array+0x44>)
 8003ef0:	f000 f826 	bl	8003f40 <_init>
 8003ef4:	1b64      	subs	r4, r4, r5
 8003ef6:	10a4      	asrs	r4, r4, #2
 8003ef8:	2600      	movs	r6, #0
 8003efa:	42a6      	cmp	r6, r4
 8003efc:	d105      	bne.n	8003f0a <__libc_init_array+0x2e>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f04:	4798      	blx	r3
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7ee      	b.n	8003ee8 <__libc_init_array+0xc>
 8003f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0e:	4798      	blx	r3
 8003f10:	3601      	adds	r6, #1
 8003f12:	e7f2      	b.n	8003efa <__libc_init_array+0x1e>
 8003f14:	08004234 	.word	0x08004234
 8003f18:	08004234 	.word	0x08004234
 8003f1c:	08004234 	.word	0x08004234
 8003f20:	08004238 	.word	0x08004238

08003f24 <memcpy>:
 8003f24:	440a      	add	r2, r1
 8003f26:	4291      	cmp	r1, r2
 8003f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f2c:	d100      	bne.n	8003f30 <memcpy+0xc>
 8003f2e:	4770      	bx	lr
 8003f30:	b510      	push	{r4, lr}
 8003f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	d1f9      	bne.n	8003f32 <memcpy+0xe>
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
